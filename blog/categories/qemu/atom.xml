<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: qemu | pietrushnic's world]]></title>
  <link href="http://pietrushnic.github.io/blog/categories/qemu/atom.xml" rel="self"/>
  <link href="http://pietrushnic.github.io/"/>
  <updated>2013-08-01T04:50:51+02:00</updated>
  <id>http://pietrushnic.github.io/</id>
  <author>
    <name><![CDATA[pietrushnic]]></name>
    <email><![CDATA[pierushnic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[0x5: Qemu network configuration and tftp for Virtual Development Board]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/"/>
    <updated>2013-06-07T10:36:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#intro">Introduction</a></li>
<li><a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">Setup tftpd</a></li>
<li><a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">QEMU networking</a></li>
<li><a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#verify-qemu-with-tftp">Verify all components of Virtual Development Platform</a></li>
<li><a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#what-next">What next ?</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>This was not trivial task to me. As usual <code>google is your friend</code> and <code>RTFM</code> works.
First we will set tftp which we use to download modified kernel for U-Boot.
Second I will show how to setup bridged network for QEMU needs and finally we
will perform some basic test of our setup. Let&rsquo;s go.</p>

<p><a id="setup-tftpd"></a></p>

<h3>Setup tftpd</h3>

<p>First install:
<code>bash
sudo apt-get install tftpd tftp
</code>
Make sure that <code>/srv/tftp</code> is writable for your user. If directory doesn&rsquo;t exist
create it and give needed privileges. If you want to change some server options
edit <code>/etc/inetd.conf</code>. Copy or link our kernel to tftp server
directory.
<code>bash
cd /path/to/kernel/arch/arm/boot
ln -s $PWD/uImage /srv/tftp/uImage
</code>
Verify if everything works correctly:
<code>bash
cd             # go to home or any other directory different than arch/arm/boot
tftp 127.0.0.1 # connect to localhost tftp server
get uImage     # get kernel file
q              # quit tftp
</code>
Check if kernel file is in current directory. If yes than you tftp server is
configured correctly, if not then google or ask me a question in comments
section.
<em>Note</em>: For Ubuntu follow instructions from
<a href="http://www.davidsudjiman.info/2006/03/27/installing-and-setting-tftpd-in-ubuntu/">here</a>.</p>

<p><a id="qemu-networking"></a></p>

<h3>QEMU networking</h3>

<p><em>Update</em>: For Ubuntu users please read <a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#ubuntu-issues">this section</a></p>

<p>I mixed <a href="http://toast.djw.org.uk/qemu.html">this</a> BKM and few other resources
that I found in the net. Setting up network depend a lot on your configuration.
I will briefly describe my situation. It is quite possible that this won&rsquo;t fit
yours.</p>

<p>I&rsquo;ve <code>eth0</code> with ip <code>10.0.2.15</code>. What I want to do is create another interface <code>tap0</code> and
bridge <code>br0</code> that will connect <code>eth0</code> and <code>tap0</code>. To do this I need few things:</p>

<ul>
<li><code>brctl</code> is provided in Debian by <code>bridge-utils</code>
<code>
sudo apt-get install bridge-utils
</code></li>
<li>check if TUN module was installed
<code>
grep CONFIG_TUN= /boot/config-`uname -r`
</code>
you should get <code>y</code> or <code>m</code>, if it is <code>m</code> than <code>modprobe tun</code>:
<code>
sudo modprobe tun
</code></li>
<li>create tun device
<code>
sudo mknod /dev/net/tun c 10 200
</code></li>
<li>update <code>/etc/network/interfaces</code>:
```bash

<h1>This file describes the network interfaces available on your system</h1>

<h1>and how to activate them. For more information, see interfaces(5).</h1></li>
</ul>


<h1>The loopback network interface</h1>

<p>auto lo
iface lo inet loopback</p>

<h1>add br0 configuration</h1>

<p>auto br0
iface br0 inet dhcp
bridge_ports eth0 # do not forget to attach eth0 to br0
bridge_fd 9
bridge_hello 2
bridge_maxage 12
bridge_stp off</p>

<h1>The primary network interface</h1>

<p>allow-hotplug eth0     # comment this
iface eth0 inet dhcp   # and this
<code>
* use `/etc/qemu-ifup` script to bring up your network:
</code>bash</p>

<h1>!/bin/sh</h1>

<p>echo &ldquo;Executing /etc/qemu-ifup&rdquo;
echo &ldquo;Bringing up $1 for bridged mode&hellip;&rdquo;
sudo /sbin/ifconfig $1 0.0.0.0 promisc up
echo &ldquo;Adding $1 to br0&hellip;&rdquo;
sudo /sbin/brctl addif br0 $1
sleep 2
```</p>

<p>Give executable permissions for this file:
<code>
sudo chmod +x /etc/qemu-ifup
</code></p>

<p>Restart networking services locally:
<code>
sudo service networking restart
</code></p>

<p>This should prepare you environment for tftp booting in qemu.</p>

<p><a id="ubuntu-issues"></a></p>

<h4>Ubuntu issues</h4>

<p>I had experienced few problems with my Ubuntu 12.04.</p>

<ul>
<li><p>First thing was defect that cause looping u-boot during emulation in
qemu-system-arm. I checked latest qemu and version delivered in distro
repository but qemu wasn&rsquo;t issue. I tried debug problem with gdb and qemu
<code>-s -S</code> switches and find out that u-boot crashes at <code>__udivsi3</code> instruction
in <code>serial_init</code>. I tried to google this issue but found only one comment
about this on <a href="http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/">Balau blog</a>:
<blockquote><p>For anyone trying to reproduce this, at least on a recent Ubuntu host, you may need to pass “-cpu all” or “-cpu cortex-a8″ to qemu. The libgcc that gets linked to u-boot appears to be compiled with thumb2 instructions which are not implemented in the Versatile cpu. I don’t get any u-boot console output without this flag, and using gdb I can see that the cpu takes an exception during <code>__udivsi3()</code> called from serial_init().</p><footer><strong>[Grant Likely]</strong></footer></blockquote>
Problem is at least 2-years old and still occurs. Unfortunately Grant&rsquo;s tricks
didn&rsquo;t help. I move to toolchain built by my own and problem was fixed. So the
moral of the story is: DO NOT USE TOOLCHAIN PROVIDED BY UBUNTU at least in
12.04.</p></li>
<li><p>Second thing also involve a lot of debugging time and when I found workaround
it was accidentally. I saw that using procedure correct for Debian on Ubuntu I
was unable to obtain any packet inside U-Boot. Network traffic analysis show
that U-Boot correctly send DHCP discovery and server reply with DHCP offer,
but bootloader behaves like no packet was received.  Static configuration also
didn&rsquo;t work. Finally I get to information how to capture traffic from inside
of emulated setup (parameter <code>-net dump,file=/path/to/file.pcap</code> do the
thing). Surprisingly for some reason adding dump param fix problem and U-Boot
received DHCP Offer and ACK. I will try to narrow down this problem for
further reading please take a look <a href="http://lists.nongnu.org/archive/html/qemu-discuss/2013-05/msg00013.html">qemu</a>
and <a href="">u-boot</a> mailing list thread.</p></li>
</ul>


<p><a id="verify-qemu-with-tftp"></a></p>

<h4>Verify all components of Virtual Development Platform</h4>

<p>So right now we should have built <a href="/blog/2013/06/07/linux-kernel-for-embedded-system">kernel uImage</a>, <a href="/blog/2013/06/07/embedded-board-bootloader">U-Boot image</a>,
<a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">configured qemu network</a> and <a href="/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">tftp server</a>. With all this components we can
verify if our kernel booting on emulated <code>versatilepb</code>.</p>

<p>Run your qemu with network using U-Boot image as a kernel.
<code>bash
sudo qemu-system-arm -kernel /path/to/u-boot/u-boot -net nic,vlan=0 -net tap,vlan=0,ifname=tap0,script=/etc/qemu-ifup -nographic -M versatilepb
</code>
<em>NOTE</em>: We want to use u-boot file instead of u-boot.bin. First is ELF binary
image and second is raw binary. Raw binary image can be used with <code>-bios</code>
parameter for qemu. If you try to give raw binary as a kernel parameter it will result with error:
<code>
qemu: fatal: Trying to execute code outside RAM or ROM at 0x08000000
</code>
<em>NOTE 2</em>: We have to specify <code>versatilepb</code> machine. If we forget it we will get
error:
<code>
qemu: hardware error: integratorcm_read: Unimplemented offset 0x1e0000
</code></p>

<p>Right now we have u-boot booted. Let&rsquo;s set ip addresses to boot uImage from our
tftp server. For verification needs we don&rsquo;t want to <code>autoload</code> downloaded
image, so we disable this through environment variable.
<code>bash
setenv autoload no
dhcp
setenv serverip 192.168.1.2
setenv bootfile uImage
tftpboot
</code>
Set addresses according to your configuration. For some reason I was unable to
use u-boot <code>dhcp</code> feature. It assign me address that exist in the network.</p>

<p>We can take a close look on out downloaded image with <code>iminfo</code> command.
<code>tftpboot</code> and <code>iminfo</code> should looks like that:
```
VersatilePB # tftpboot
SMC91111: PHY auto-negotiate timed out
SMC91111: MAC 52:54:00:12:34:56
Using SMC91111-0 device
TFTP from server 10.0.2.15; our IP address is 10.0.2.16
Filename &lsquo;uImage&rsquo;.
Load address: 0x7fc0
Loading: #################################################################</p>

<pre><code>     #################################################################
     #################################################################
     #################################################################
     #################################################################
     ##############################################
     0 Bytes/s
</code></pre>

<p>done
Bytes transferred =
1895064 (1cea98 hex)
VersatilePB # iminfo</p>

<h2>Checking Image at</h2>

<p>00007fc0 &hellip;</p>

<pre><code>Legacy image found
Image Name:   Linux-3.9.0-rc8
Image Type:   ARM Linux Kernel Image (uncompressed)
Data Size:    1895000 Bytes = 1.8 MiB
Load Address: 00008000
Entry Point:  00008000
Verifying Checksum ... OK
</code></pre>

<p>```</p>

<p>So, that what we want to see. Pretty new kernel <code>3.9.0-rc8</code> compiled as ARM
image. We can try to boot it but we will end with kernel panic because lack of
filesystem.</p>

<p><em>NOTE 3</em>: If you want to see anything after booting this image with <code>bootm</code> you
have to pass to kernel additional boot argument with serial device that should
be used as a console. Before <code>bootm</code> set:
<code>
setenv bootargs console=ttyAMA0
</code>
You should get something similar to below log:
<code>
(...)
eth0: SMC91C11xFD (rev 1) at c89c8000 IRQ 57 [nowait]
eth0: Ethernet addr: 52:54:00:12:34:56
mousedev: PS/2 mouse device common for all mice
TCP: cubic registered
NET: Registered protocol family 17
VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0
VFS: Cannot open root device "(null)" or unknown-block(0,0): error -6
Please append a correct "root=" boot option; here are the available partitions:
1f00           65536 mtdblock0  (driver?)
Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)
[&lt;c0018afc&gt;] (unwind_backtrace+0x0/0xf0) from [&lt;c027af8c&gt;] (panic+0x80/0x1d0)
[&lt;c027af8c&gt;] (panic+0x80/0x1d0) from [&lt;c0343c64&gt;] (mount_block_root+0x1a0/0x258)
[&lt;c0343c64&gt;] (mount_block_root+0x1a0/0x258) from [&lt;c0343f08&gt;] (mount_root+0xf0/0x118)
[&lt;c0343f08&gt;] (mount_root+0xf0/0x118) from [&lt;c0344090&gt;] (prepare_namespace+0x160/0x1b4)
[&lt;c0344090&gt;] (prepare_namespace+0x160/0x1b4) from [&lt;c03438ec&gt;] (kernel_init_freeable+0x168/0x1ac)
[&lt;c03438ec&gt;] (kernel_init_freeable+0x168/0x1ac) from [&lt;c027a074&gt;] (kernel_init+0x8/0xe4)
[&lt;c027a074&gt;] (kernel_init+0x8/0xe4) from [&lt;c0013df0&gt;] (ret_from_fork+0x14/0x24)
</code>
This is expected result.</p>

<p><a id="what-next"></a></p>

<h3>What next ?</h3>

<p>We happily built basic virtual development, what we need right now is some
<a href="/blog/2013/06/07/root-file-system-for-embedded-system">initial filesystem</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x1: Qemu as an environment for embedded board emulation]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/"/>
    <updated>2013-06-07T08:27:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#intro">Introduction</a></li>
<li><a href="/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#compilation">Compilation</a></li>
<li><a href="/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#kudos">Kudos</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>QEMU is a CPU emulator using dynamic binary translation to convert guest CPU
instructions into host CPU instructions<a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">[1]</a>. It supports many architectures from
x86, through ARM and MIPS, to MicroBlaze. According to compilation configuration
target list QEMU targets 26 different softmmu types.  Only for ARM it supports
33 machines (like ARM Versatile/PB (ARM926EJ-S) or Samsung NURI board
(Exynos4210)) and 28 CPUs (with cortex-a9 and pxa270). It gives access to
network, storage, video, usb, serial and other peripheral, also user defined. It
is developed under GNU GPL, so everybody are free to make modifications, improve
and extend it. This properties makes QEMU very good candidate for virtual board
emulator.</p>

<p><a id="compilation"></a></p>

<h3>Compilation</h3>

<p>Let&rsquo;s start creating our Virtual Development Board. As usually I will use latest
greatest version from git:
<code>bash
git clone http://git.qemu.org/git/qemu.git
</code>
Compile it and install. Right now I will use only <code>arm-softmmu</code> target because it
will emulate whole arm system for me. ARM right now dominated big part of
embedded market but we will see if situation won&rsquo;t change in feature.
<code>bash
cd qemu
./configure --target-list=arm-softmmu
make
make install
</code>
During configuration process you can encounter lack of <code>pixman</code>, just accept qemu
offer to initialize it as a submodule.
<code>
git submodule update --init pixman
make # restart compilation process
make install
</code>
If compilation ends without problem than our first component is ready to use.
Right now we can emulate our ARM based board with many types of CPUs. List of
all available can be retrieved by running command <code>qemu-system-arm -cpu ?</code>, list
of emulated machines by <code>-M ?</code>. Now, let&rsquo;s talk about <a href="/blog/2013/06/07/toolchain-for-virtual-development-board">toolchains</a>.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">Dynamically Translating x86 to LLVM using QEMU</a></p>
]]></content>
  </entry>
  
</feed>
