<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[pietrushnic's world]]></title>
  <link href="http://pietrushnic.github.io/atom.xml" rel="self"/>
  <link href="http://pietrushnic.github.io/"/>
  <updated>2013-07-28T08:33:46+02:00</updated>
  <id>http://pietrushnic.github.io/</id>
  <author>
    <name><![CDATA[pietrushnic]]></name>
    <email><![CDATA[pierushnic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[0x6: Root file system for embedded system]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/"/>
    <updated>2013-06-07T10:40:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#get-bb">Get and build BusyBox</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#fast-and-simple">Fast and simple</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#setting-up-kernel-through-nfs">Setting up kernel through NFS</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#verify-configuration">Verify Configuration</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#embedded-filesystem-tuning">Embedded filesystem tuning</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#summary">Summary</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>To make our embedded linux work as virtual development platform we need some
environment after booting. There is many approaches to get working root file
system but I will use the easiest one as an exercise. I don&rsquo;t want to create full
embedded distribution (this is good plan for future works). Right now I will be
happy with simple initramfs based on <a href="http://busybox.net/">BusyBox</a>.</p>

<p>For all interested in creating own root filesystem there are few places where
you can find informations:</p>

<ul>
<li><a href="http://lwn.net/Articles/210046/">Embedded Linux: Small Root Filesystems</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt">ramfs-rootfs-initramfs</a></li>
<li><a href="http://processors.wiki.ti.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x">Creating a Root File System for Linux on OMAP35x</a></li>
</ul>


<p><a id="get-bb"></a></p>

<h3>Get and build BusyBox</h3>

<p>Clone git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://git.busybox.net/busybox</span></code></pre></td></tr></table></div></figure>


<p><a id="fast-and-simple"></a></p>

<h3>Fast and simple</h3>

<p>Of course make sure to use correct toolchain. I made few notes about
Ubuntu/Linaro toolchain in <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#ubuntu-issues">previous post</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig</span></code></pre></td></tr></table></div></figure>


<p>Mark <code>Busybox Settings -&gt; Build Options -&gt; Build BusyBox as a static binary (no
shared libs)</code> option. Exit and save.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- install
</span><span class='line'>cd _install/</span></code></pre></td></tr></table></div></figure>


<p><a id="setting-up-kernel-through-nfs"></a></p>

<h3>Setting up kernel through NFS</h3>

<p><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">Previously</a> we prepared U-Boot
kenernel image with DHCP and rootfs which we want to expose over NFS. First lets start with NFS
configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nfs-kernel-server</span></code></pre></td></tr></table></div></figure>


<p>I use simple <code>/etc/exports</code> configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/homes 192.168.1.0/255.255.255.0(rw,sync,no_subtree_check,no_root_squash)</span></code></pre></td></tr></table></div></figure>


<p>Make sure that <code>/srv/homes</code> exist, if no than create it. After editing nfs
configuration file we have to restart NFS server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nfs-kernel-server restart</span></code></pre></td></tr></table></div></figure>


<p><a id="verify-configuration"></a></p>

<h3>Verify configuration</h3>

<p>I assume that you go through all previous articles in this series.
To verify configuration we have to copy whole BusyBox <code>_install</code> directory to
known nfs location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /srv/homes/rootfs
</span><span class='line'>sudo chmod 777 /srv/homes/rootfs
</span><span class='line'>cd /srv/homes/rootfs
</span><span class='line'>cp -R /path/to/busybox/_install/* .</span></code></pre></td></tr></table></div></figure>


<p>Now we can try our Virtual Development Board:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo qemu-system-arm -kernel src/u-boot/u-boot -net nic,vlan=0 -net \
</span><span class='line'>tap,vlan=0,ifname=tap0,script=/etc/qemu-ifup -nographic -M versatilepb</span></code></pre></td></tr></table></div></figure>


<p>After U-Boot booting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VersatilePB # setenv autload no
</span><span class='line'>VersatilePB # dhcp
</span><span class='line'>MC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>BOOTP broadcast 1
</span><span class='line'>DHCP client bound to address 192.168.1.13
</span><span class='line'>VersatilePB # setenv serverip 192.168.1.24
</span><span class='line'>VersatilePB # setenv bootfile uImage
</span><span class='line'>VersatilePB # tftp</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>192.168.1.24</code> should be replaced with correct address of TFTP server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VersatilePB # tftp
</span><span class='line'>SMC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>Using SMC91111-0 device
</span><span class='line'>TFTP from server 192.168.1.20; our IP address is 192.168.1.13
</span><span class='line'>Filename 'uImage'.
</span><span class='line'>Load address: 0x7fc0
</span><span class='line'>Loading: #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         ##################################################
</span><span class='line'>         252 KiB/s
</span><span class='line'>done
</span><span class='line'>Bytes transferred = 1917944 (1d43f8 hex)</span></code></pre></td></tr></table></div></figure>


<p>Right now we will set boot arguments for our kernel:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setenv bootargs 'root=/dev/nfs mem=128M ip=dhcp netdev=25,0,0xf1010000,0xf1010010,eth0 nfsroot=192.168.1.20:/srv/homes/rootfs console=ttyAMA0'</span></code></pre></td></tr></table></div></figure>


<p>What does it mean:</p>

<ul>
<li><code>root=/dev/nfs</code> &ndash; following
<a href="https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt">kernel.org</a>:</li>
</ul>


<blockquote><p>This is necessary to enable the pseudo-NFS-device. Note that it&#8217;s not a<br/>real device but just a synonym to tell the kernel to use NFS instead of<br/>a real device.</p></blockquote>


<ul>
<li><code>mem=128M ip=dhcp</code> &ndash; self-explaining</li>
<li><code>netdev=25,0,0xf1010000,0xf1010010,eth0</code> &ndash; network device configuration
(<code>Format: &lt;irq&gt;,&lt;io&gt;,&lt;mem_start&gt;,&lt;mem_end&gt;,&lt;name&gt;</code>), this was provided by
default <code>U-Boot</code> bootargs</li>
<li><code>nfsroot=192.168.1.20:/srv/homes/rootfs</code> &ndash; NFS server ip and path to rootfs</li>
<li><code>console=ttyAMA0</code> &ndash; very importanat if you want to see anything in <code>-nographic</code> mode</li>
</ul>


<p>After setting bootargs we can boot our Virtual Development Board:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bootm</span></code></pre></td></tr></table></div></figure>


<p>As you can see that&rsquo;s not all, our current configuration end with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>Sending DHCP requests .input: AT Raw Set 2 keyboard as 
</span><span class='line'>/devices/fpga:06/serio0/input/input0
</span><span class='line'>, OK
</span><span class='line'>IP-Config: Got DHCP answer from 192.168.1.1, my address is 192.168.1.13
</span><span class='line'>IP-Config: Complete:
</span><span class='line'>     device=eth0, hwaddr=52:54:00:12:34:56, ipaddr=192.168.1.13, mask=255.255.255.0, gw=192.168.1.1
</span><span class='line'>     host=192.168.1.13, domain=, nis-domain=(none)
</span><span class='line'>     bootserver=0.0.0.0, rootserver=192.168.1.20, rootpath=
</span><span class='line'>     nameserver0=192.168.1.1
</span><span class='line'>input: ImExPS/2 Generic Explorer Mouse as 
</span><span class='line'>/devices/fpga:07/serio1/input/input1
</span><span class='line'>VFS: Mounted root (nfs filesystem) on device 0:9.
</span><span class='line'>Freeing unused kernel memory: 112K (c034e000 - c036a000)
</span><span class='line'>nfs: server 192.168.1.20 not responding, still trying
</span><span class='line'>nfs: server 192.168.1.20 OK
</span><span class='line'>can't run '/etc/init.d/rcS': No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory
</span><span class='line'>
</span><span class='line'>can't open /dev/tty4: No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory
</span><span class='line'>can't open /dev/tty4: No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>try to open ttys loop. This is because of default behavior of <code>BusyBox</code> when <code>inittab</code>
was not found.</p>

<p><a id="embedded-filesystem-tuning"></a></p>

<h3>Embedded filesystem tuning</h3>

<p>To override above behavior we have to create <code>/etc/inittab</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /srv/homes/rootfs
</span><span class='line'>mkdir etc
</span><span class='line'>vim etc/inittab</span></code></pre></td></tr></table></div></figure>


<p>Our <code>inittab</code> is very simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>::sysinit:/etc/init.d/rcS
</span><span class='line'>::askfirst:/bin/ash
</span><span class='line'>::ctrlaltdel:/sbin/reboot
</span><span class='line'>::shutdown:/sbin/swapoff -a
</span><span class='line'>::shutdown:/bin/umount -a -r
</span><span class='line'>::restart:/sbin/init</span></code></pre></td></tr></table></div></figure>


<p>If you want to learn more about inittab &ndash; <code>man inittab</code> .We need improve out filesystem with few directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir sys proc etc/init.d</span></code></pre></td></tr></table></div></figure>


<p>In <code>/etc/init.d/rcS</code> we will mount sysfs and procfs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>mount -t proc proc /proc
</span><span class='line'>mount -t sysfs sysfs /sys
</span></code></pre></td></tr></table></div></figure>


<p>Give executable permission to <code>rcS</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x etc/init.d/rcS
</span></code></pre></td></tr></table></div></figure>


<p>We also have to create <code>dev</code> directory with <code>ttyAMA0</code> block device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir dev
</span><span class='line'>sudo mknod dev/ttyAMA0 c 204 64
</span><span class='line'>sudo mknod dev/null c 1 3
</span><span class='line'>sudo mknod dev/console c 5 1
</span></code></pre></td></tr></table></div></figure>


<p>Right now we should be able to boot our Virtual Development Board. Let&rsquo;s try
again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pietrushnic@eglarest:~<span class="nv">$ </span>sudo qemu-system-arm -m 256M -kernel src/u-boot/u-boot -net nic,vlan<span class="o">=</span>0 -net tap,vlan<span class="o">=</span>0,ifname<span class="o">=</span>tap0,script<span class="o">=</span>/etc/qemu-ifup -nographic -M versatilepb -net dump,file<span class="o">=</span>/tmp/dump.pcap
</span><span class='line'>Executing /etc/qemu-ifup
</span><span class='line'>Bringing up tap0 <span class="k">for </span>bridged mode...
</span><span class='line'>Adding tap0 to br0...
</span><span class='line'>oss: Could not initialize DAC
</span><span class='line'>oss: Failed to open <span class="sb">`</span>/dev/dsp<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">oss: Reason: No such file or directory</span>
</span><span class='line'><span class="s1">oss: Could not initialize DAC</span>
</span><span class='line'><span class="s1">oss: Failed to open `/dev/dsp&#39;</span>
</span><span class='line'>oss: Reason: No such file or directory
</span><span class='line'>audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">U-Boot 2013.04-00274-ga71d45d (May 27 2013 - 17:36:14)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">DRAM:  128 MiB</span>
</span><span class='line'><span class="s1">WARNING: Caches not enabled</span>
</span><span class='line'><span class="s1">Flash: 64 MiB</span>
</span><span class='line'><span class="s1">*** Warning - bad CRC, using default environment</span>
</span><span class='line'>
</span><span class='line'><span class="s1">In:    serial</span>
</span><span class='line'><span class="s1">Out:   serial</span>
</span><span class='line'><span class="s1">Err:   serial</span>
</span><span class='line'><span class="s1">Net:   SMC91111-0</span>
</span><span class='line'><span class="s1">Warning: SMC91111-0 using MAC address from net device</span>
</span><span class='line'>
</span><span class='line'><span class="s1">VersatilePB # setenv serverip 192.168.1.24</span>
</span><span class='line'><span class="s1">VersatilePB # setenv bootfile uImage</span>
</span><span class='line'><span class="s1">VersatilePB # setenv bootargs &#39;</span><span class="nv">root</span><span class="o">=</span>/dev/nfs <span class="nv">mem</span><span class="o">=</span>128M <span class="nv">ip</span><span class="o">=</span>dhcp <span class="nv">netdev</span><span class="o">=</span>25,0,0xf1010000,0xf1010010,eth0 <span class="nv">nfsroot</span><span class="o">=</span>192.168.1.24:/sv/homes/rootfs <span class="nv">console</span><span class="o">=</span>ttyAMA0<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">VersatilePB # dhcp</span>
</span><span class='line'><span class="s1">SMC91111: PHY auto-negotiate timed out</span>
</span><span class='line'><span class="s1">SMC91111: MAC 52:54:00:12:34:56</span>
</span><span class='line'><span class="s1">BOOTP broadcast 1</span>
</span><span class='line'><span class="s1">DHCP client bound to address 192.168.1.13</span>
</span><span class='line'><span class="s1">Using SMC91111-0 device</span>
</span><span class='line'><span class="s1">TFTP from server 192.168.1.24; our IP address is 192.168.1.13</span>
</span><span class='line'><span class="s1">Filename &#39;</span>uImage<span class="s1">&#39;.</span>
</span><span class='line'><span class="s1">Load address: 0x7fc0</span>
</span><span class='line'><span class="s1">Loading: *############T #####################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  ##################################################</span>
</span><span class='line'><span class="s1">  0 Bytes/s</span>
</span><span class='line'><span class="s1">done</span>
</span><span class='line'><span class="s1">Bytes transferred = 1917944 (1d43f8 hex)</span>
</span><span class='line'><span class="s1">VersatilePB # bootm</span>
</span><span class='line'><span class="s1">## Booting kernel from Legacy Image at 00007fc0 ...</span>
</span><span class='line'><span class="s1">   Image Name:   Linux-3.10.0-rc3</span>
</span><span class='line'><span class="s1">   Image Type:   ARM Linux Kernel Image (uncompressed)</span>
</span><span class='line'><span class="s1">   Data Size:    1917880 Bytes = 1.8 MiB</span>
</span><span class='line'><span class="s1">   Load Address: 00008000</span>
</span><span class='line'><span class="s1">   Entry Point:  00008000</span>
</span><span class='line'><span class="s1">   XIP Kernel Image ... OK</span>
</span><span class='line'><span class="s1">OK</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Starting kernel ...</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Uncompressing Linux... done, booting the kernel.</span>
</span><span class='line'><span class="s1">Booting Linux on physical CPU 0x0</span>
</span><span class='line'><span class="s1">Linux version 3.10.0-rc3 (pietrushnic@eglarest) (gcc version 4.7.2 (Debian 4.7.2-4) ) #2 Sun Jun 2 20:25:23 CEST 2013</span>
</span><span class='line'><span class="s1">CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177</span>
</span><span class='line'><span class="s1">CPU: VIVT data cache, VIVT instruction cache</span>
</span><span class='line'><span class="s1">Machine: ARM-Versatile PB</span>
</span><span class='line'><span class="s1">Memory policy: ECC disabled, Data cache writeback</span>
</span><span class='line'><span class="s1">sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 178956ms</span>
</span><span class='line'><span class="s1">Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512</span>
</span><span class='line'><span class="s1">Kernel command line: root=/dev/nfs mem=128M ip=dhcp netdev=25,0,0xf1010000,0xf1010010,eth0 nfsroot=192.168.1.24:/srv/homes/rootfs console=ttyAMA0</span>
</span><span class='line'><span class="s1">PID hash table entries: 512 (order: -1, 2048 bytes)</span>
</span><span class='line'><span class="s1">Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)</span>
</span><span class='line'><span class="s1">Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)</span>
</span><span class='line'><span class="s1">Memory: 128MB = 128MB total</span>
</span><span class='line'><span class="s1">Memory: 126136k/126136k available, 4936k reserved, 0K highmem</span>
</span><span class='line'><span class="s1">Virtual kernel memory layout:</span>
</span><span class='line'><span class="s1">    vector  : 0xffff0000 - 0xffff1000   (   4 kB)</span>
</span><span class='line'><span class="s1">    fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)</span>
</span><span class='line'><span class="s1">    vmalloc : 0xc8800000 - 0xff000000   ( 872 MB)</span>
</span><span class='line'><span class="s1">    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)</span>
</span><span class='line'><span class="s1">    modules : 0xbf000000 - 0xc0000000   (  16 MB)</span>
</span><span class='line'><span class="s1">      .text : 0xc0008000 - 0xc034dd58   (3352 kB)</span>
</span><span class='line'><span class="s1">      .init : 0xc034e000 - 0xc036ae8c   ( 116 kB)</span>
</span><span class='line'><span class="s1">      .data : 0xc036c000 - 0xc0391de0   ( 152 kB)</span>
</span><span class='line'><span class="s1">       .bss : 0xc0391de0 - 0xc03ad6cc   ( 111 kB)</span>
</span><span class='line'><span class="s1">NR_IRQS:224</span>
</span><span class='line'><span class="s1">VIC @f1140000: id 0x00041190, vendor 0x41</span>
</span><span class='line'><span class="s1">FPGA IRQ chip 0 &quot;SIC&quot; @ f1003000, 13 irqs</span>
</span><span class='line'><span class="s1">Console: colour dummy device 80x30</span>
</span><span class='line'><span class="s1">Calibrating delay loop... 649.21 BogoMIPS (lpj=3246080)</span>
</span><span class='line'><span class="s1">pid_max: default: 32768 minimum: 301</span>
</span><span class='line'><span class="s1">Mount-cache hash table entries: 512</span>
</span><span class='line'><span class="s1">CPU: Testing write buffer coherency: ok</span>
</span><span class='line'><span class="s1">Setting up static identity map for 0xc0286e90 - 0xc0286ee8</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 16</span>
</span><span class='line'><span class="s1">DMA: preallocated 256 KiB pool for atomic coherent allocations</span>
</span><span class='line'><span class="s1">Serial: AMBA PL011 UART driver</span>
</span><span class='line'><span class="s1">dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44) is a PL011 rev1</span>
</span><span class='line'><span class="s1">console [ttyAMA0] enabled</span>
</span><span class='line'><span class="s1">dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45) is a PL011 rev1</span>
</span><span class='line'><span class="s1">dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46) is a PL011 rev1</span>
</span><span class='line'><span class="s1">fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70) is a PL011 rev1</span>
</span><span class='line'><span class="s1">bio: create slab &lt;bio-0&gt; at 0</span>
</span><span class='line'><span class="s1">Switching to clocksource timer3</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 2</span>
</span><span class='line'><span class="s1">TCP established hash table entries: 1024 (order: 1, 8192 bytes)</span>
</span><span class='line'><span class="s1">TCP bind hash table entries: 1024 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">TCP: Hash tables configured (established 1024 bind 1024)</span>
</span><span class='line'><span class="s1">TCP: reno registered</span>
</span><span class='line'><span class="s1">UDP hash table entries: 256 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 1</span>
</span><span class='line'><span class="s1">RPC: Registered named UNIX socket transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered udp transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered tcp transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered tcp NFSv4.1 backchannel transport module.</span>
</span><span class='line'><span class="s1">NetWinder Floating Point Emulator V0.97 (double precision)</span>
</span><span class='line'><span class="s1">Installing knfsd (copyright (C) 1996 okir@monad.swb.de).</span>
</span><span class='line'><span class="s1">jffs2: version 2.2. (NAND) © 2001-2006 Red Hat, Inc.</span>
</span><span class='line'><span class="s1">ROMFS MTD (C) 2007 Red Hat, Inc.</span>
</span><span class='line'><span class="s1">msgmni has been set to 246</span>
</span><span class='line'><span class="s1">Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)</span>
</span><span class='line'><span class="s1">io scheduler noop registered</span>
</span><span class='line'><span class="s1">io scheduler deadline registered</span>
</span><span class='line'><span class="s1">io scheduler cfq registered (default)</span>
</span><span class='line'><span class="s1">clcd-pl11x dev:20: PL110 rev0 at 0x10120000</span>
</span><span class='line'><span class="s1">clcd-pl11x dev:20: Versatile hardware, VGA display</span>
</span><span class='line'><span class="s1">Console: switching to colour frame buffer device 80x60</span>
</span><span class='line'><span class="s1">brd: module loaded</span>
</span><span class='line'><span class="s1">physmap platform flash device: 04000000 at 34000000</span>
</span><span class='line'><span class="s1">physmap-flash.0: Found 1 x32 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span>
</span><span class='line'><span class="s1">Intel/Sharp Extended Query Table at 0x0031</span>
</span><span class='line'><span class="s1">Using buffer write method</span>
</span><span class='line'><span class="s1">smc91x.c: v1.1, sep 22 2004 by Nicolas Pitre &lt;nico@fluxnic.net&gt;</span>
</span><span class='line'><span class="s1">eth0: SMC91C11xFD (rev 1) at c89c8000 IRQ 57 [nowait]</span>
</span><span class='line'><span class="s1">eth0: Ethernet addr: 52:54:00:12:34:56</span>
</span><span class='line'><span class="s1">mousedev: PS/2 mouse device common for all mice</span>
</span><span class='line'><span class="s1">TCP: cubic registered</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 17</span>
</span><span class='line'><span class="s1">VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0</span>
</span><span class='line'><span class="s1">eth0: link up</span>
</span><span class='line'><span class="s1">Sending DHCP requests ., OK</span>
</span><span class='line'><span class="s1">IP-Config: Got DHCP answer from 192.168.1.1, my address is 192.168.1.13</span>
</span><span class='line'><span class="s1">IP-Config: Complete:</span>
</span><span class='line'><span class="s1">     device=eth0, hwaddr=52:54:00:12:34:56, ipaddr=192.168.1.13, mask=255.255.255.0, gw=192.168.1.1</span>
</span><span class='line'><span class="s1">     host=192.168.1.13, domain=, nis-domain=(none)</span>
</span><span class='line'><span class="s1">     bootserver=0.0.0.0, rootserver=192.168.1.24, rootpath=</span>
</span><span class='line'><span class="s1">     nameserver0=192.168.1.1</span>
</span><span class='line'><span class="s1">input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0</span>
</span><span class='line'><span class="s1">input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input1</span>
</span><span class='line'><span class="s1">VFS: Mounted root (nfs filesystem) on device 0:9.</span>
</span><span class='line'><span class="s1">Freeing unused kernel memory: 112K (c034e000 - c036a000)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Please press Enter to activate this console. </span>
</span><span class='line'><span class="s1">/bin/ash: can&#39;</span>t access tty; job control turned off
</span><span class='line'>/ <span class="c"># </span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="summary"></a></p>

<h3>Summary</h3>

<p>This setup need few minor tweaks like adding U-Boot environment variables
storage to not enter it every time or removing annoying message <code>can't access
tty(...)</code>. I&rsquo;m done for now, its time to take care about other challenges. I
hope that I will back to this issues in near future. If you like this series
please share it, if somethings wrong please comment I will try to help if can.</p>

<p><a href="http://bec-systems.com/site/418/how-to-set-up-a-nfs-rootfs">How to set up a NFS root filesystem for embedded Linux development</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x5: Qemu network configuration and tftp for Virtual Development Board]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/"/>
    <updated>2013-06-07T10:36:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">Setup tftpd</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">QEMU networking</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#verify-qemu-with-tftp">Verify all components of Virtual Development Platform</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#what-next">What next ?</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>This was not trivial task to me. As usual <code>google is your friend</code> and <code>RTFM</code> works.
First we will set tftp which we use to download modified kernel for U-Boot.
Second I will show how to setup bridged network for QEMU needs and finally we
will perform some basic test of our setup. Let&rsquo;s go.</p>

<p><a id="setup-tftpd"></a></p>

<h3>Setup tftpd</h3>

<p>First install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install tftpd tftp
</span></code></pre></td></tr></table></div></figure>


<p>Make sure that <code>/srv/tftp</code> is writable for your user. If directory doesn&rsquo;t exist
create it and give needed privileges. If you want to change some server options
edit <code>/etc/inetd.conf</code>. Copy or link our kernel to tftp server
directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /path/to/kernel/arch/arm/boot
</span><span class='line'>ln -s <span class="nv">$PWD</span>/uImage /srv/tftp/uImage
</span></code></pre></td></tr></table></div></figure>


<p>Verify if everything works correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span>             <span class="c"># go to home or any other directory different than arch/arm/boot</span>
</span><span class='line'>tftp 127.0.0.1 <span class="c"># connect to localhost tftp server</span>
</span><span class='line'>get uImage     <span class="c"># get kernel file</span>
</span><span class='line'>q              <span class="c"># quit tftp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if kernel file is in current directory. If yes than you tftp server is
configured correctly, if not then google or ask me a question in comments
section.
<em>Note</em>: For Ubuntu follow instructions from
<a href="http://www.davidsudjiman.info/2006/03/27/installing-and-setting-tftpd-in-ubuntu/">here</a>.</p>

<p><a id="qemu-networking"></a></p>

<h3>QEMU networking</h3>

<p><em>Update</em>: For Ubuntu users please read <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#ubuntu-issues">this section</a></p>

<p>I mixed <a href="http://toast.djw.org.uk/qemu.html">this</a> BKM and few other resources
that I found in the net. Setting up network depend a lot on your configuration.
I will briefly describe my situation. It is quite possible that this won&rsquo;t fit
yours.</p>

<p>I&rsquo;ve <code>eth0</code> with ip <code>10.0.2.15</code>. What I want to do is create another interface <code>tap0</code> and
bridge <code>br0</code> that will connect <code>eth0</code> and <code>tap0</code>. To do this I need few things:</p>

<ul>
<li><code>brctl</code> is provided in Debian by <code>bridge-utils</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install bridge-utils
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>check if TUN module was installed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep <span class="nv">CONFIG_TUN</span><span class="o">=</span> /boot/config-<span class="sb">`</span>uname -r<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>you should get <code>y</code> or <code>m</code>, if it is <code>m</code> than <code>modprobe tun</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo modprobe tun
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>create tun device</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mknod /dev/net/tun c 10 200
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update <code>/etc/network/interfaces</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This file describes the network interfaces available on your system</span>
</span><span class='line'><span class="c"># and how to activate them. For more information, see interfaces(5).</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The loopback network interface</span>
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'><span class="c"># add br0 configuration</span>
</span><span class='line'>auto br0
</span><span class='line'>iface br0 inet dhcp
</span><span class='line'>bridge_ports eth0 <span class="c"># do not forget to attach eth0 to br0</span>
</span><span class='line'>bridge_fd 9
</span><span class='line'>bridge_hello 2
</span><span class='line'>bridge_maxage 12
</span><span class='line'>bridge_stp off
</span><span class='line'>
</span><span class='line'><span class="c"># The primary network interface</span>
</span><span class='line'>allow-hotplug eth0     <span class="c"># comment this</span>
</span><span class='line'>iface eth0 inet dhcp   <span class="c"># and this</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>use <code>/etc/qemu-ifup</code> script to bring up your network:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Executing /etc/qemu-ifup&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Bringing up $1 for bridged mode...&quot;</span>
</span><span class='line'>sudo /sbin/ifconfig <span class="nv">$1</span> 0.0.0.0 promisc up
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Adding $1 to br0...&quot;</span>
</span><span class='line'>sudo /sbin/brctl addif br0 <span class="nv">$1</span>
</span><span class='line'>sleep 2
</span></code></pre></td></tr></table></div></figure>


<p>Give executable permissions for this file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /etc/qemu-ifup
</span></code></pre></td></tr></table></div></figure>


<p>Restart networking services locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service networking restart
</span></code></pre></td></tr></table></div></figure>


<p>This should prepare you environment for tftp booting in qemu.</p>

<p><a id="ubuntu-issues"></a></p>

<h4>Ubuntu issues</h4>

<p>I had experienced few problems with my Ubuntu 12.04.</p>

<ul>
<li><p>First thing was defect that cause looping u-boot during emulation in
qemu-system-arm. I checked latest qemu and version delivered in distro
repository but qemu wasn&rsquo;t issue. I tried debug problem with gdb and qemu
<code>-s -S</code> switches and find out that u-boot crashes at <code>__udivsi3</code> instruction
in <code>serial_init</code>. I tried to google this issue but found only one comment
about this on <a href="http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/">Balau blog</a>:
<blockquote><p>For anyone trying to reproduce this, at least on a recent Ubuntu host, you may need to pass “-cpu all” or “-cpu cortex-a8″ to qemu. The libgcc that gets linked to u-boot appears to be compiled with thumb2 instructions which are not implemented in the Versatile cpu. I don’t get any u-boot console output without this flag, and using gdb I can see that the cpu takes an exception during <code>__udivsi3()</code> called from serial_init().</p><footer><strong>[Grant Likely]</strong></footer></blockquote>
Problem is at least 2-years old and still occurs. Unfortunately Grant&rsquo;s tricks
didn&rsquo;t help. I move to toolchain built by my own and problem was fixed. So the
moral of the story is: DO NOT USE TOOLCHAIN PROVIDED BY UBUNTU at least in
12.04.</p></li>
<li><p>Second thing also involve a lot of debugging time and when I found workaround
it was accidentally. I saw that using procedure correct for Debian on Ubuntu I
was unable to obtain any packet inside U-Boot. Network traffic analysis show
that U-Boot correctly send DHCP discovery and server reply with DHCP offer,
but bootloader behaves like no packet was received.  Static configuration also
didn&rsquo;t work. Finally I get to information how to capture traffic from inside
of emulated setup (parameter <code>-net dump,file=/path/to/file.pcap</code> do the
thing). Surprisingly for some reason adding dump param fix problem and U-Boot
received DHCP Offer and ACK. I will try to narrow down this problem for
further reading please take a look <a href="http://lists.nongnu.org/archive/html/qemu-discuss/2013-05/msg00013.html">qemu</a>
and <a href="">u-boot</a> mailing list thread.</p></li>
</ul>


<p><a id="verify-qemu-with-tftp"></a></p>

<h4>Verify all components of Virtual Development Platform</h4>

<p>So right now we should have built <a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">kernel uImage</a>, <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">U-Boot image</a>,
<a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">configured qemu network</a> and <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">tftp server</a>. With all this components we can
verify if our kernel booting on emulated <code>versatilepb</code>.</p>

<p>Run your qemu with network using U-Boot image as a kernel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo qemu-system-arm -kernel /path/to/u-boot/u-boot -net nic,vlan<span class="o">=</span>0 -net tap,vlan<span class="o">=</span>0,ifname<span class="o">=</span>tap0,script<span class="o">=</span>/etc/qemu-ifup -nographic -M versatilepb
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE</em>: We want to use u-boot file instead of u-boot.bin. First is ELF binary
image and second is raw binary. Raw binary image can be used with <code>-bios</code>
parameter for qemu. If you try to give raw binary as a kernel parameter it will result with error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>qemu: fatal: Trying to execute code outside RAM or ROM at 0x08000000
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE 2</em>: We have to specify <code>versatilepb</code> machine. If we forget it we will get
error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>qemu: hardware error: integratorcm_read: Unimplemented offset 0x1e0000
</span></code></pre></td></tr></table></div></figure>


<p>Right now we have u-boot booted. Let&rsquo;s set ip addresses to boot uImage from our
tftp server. For verification needs we don&rsquo;t want to <code>autoload</code> downloaded
image, so we disable this through environment variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv autoload no
</span><span class='line'>dhcp
</span><span class='line'>setenv serverip 192.168.1.2
</span><span class='line'>setenv bootfile uImage
</span><span class='line'>tftpboot
</span></code></pre></td></tr></table></div></figure>


<p>Set addresses according to your configuration. For some reason I was unable to
use u-boot <code>dhcp</code> feature. It assign me address that exist in the network.</p>

<p>We can take a close look on out downloaded image with <code>iminfo</code> command.
<code>tftpboot</code> and <code>iminfo</code> should looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>VersatilePB <span class="c"># tftpboot</span>
</span><span class='line'>SMC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>Using SMC91111-0 device
</span><span class='line'>TFTP from server 10.0.2.15; our IP address is 10.0.2.16
</span><span class='line'>Filename <span class="s1">&#39;uImage&#39;</span>.
</span><span class='line'>Load address: 0x7fc0
</span><span class='line'>Loading: <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">##############################################</span>
</span><span class='line'>         0 Bytes/s
</span><span class='line'><span class="k">done</span>
</span><span class='line'>Bytes <span class="nv">transferred</span> <span class="o">=</span>
</span><span class='line'>1895064 <span class="o">(</span>1cea98 hex<span class="o">)</span>
</span><span class='line'>VersatilePB <span class="c"># iminfo</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Checking Image at </span>
</span><span class='line'>00007fc0 ...
</span><span class='line'>    Legacy image found
</span><span class='line'>    Image Name:   Linux-3.9.0-rc8
</span><span class='line'>    Image Type:   ARM Linux Kernel Image <span class="o">(</span>uncompressed<span class="o">)</span>
</span><span class='line'>    Data Size:    1895000 <span class="nv">Bytes</span> <span class="o">=</span> 1.8 MiB
</span><span class='line'>    Load Address: 00008000
</span><span class='line'>    Entry Point:  00008000
</span><span class='line'>    Verifying Checksum ... OK
</span></code></pre></td></tr></table></div></figure>


<p>So, that what we want to see. Pretty new kernel <code>3.9.0-rc8</code> compiled as ARM
image. We can try to boot it but we will end with kernel panic because lack of
filesystem.</p>

<p><em>NOTE 3</em>: If you want to see anything after booting this image with <code>bootm</code> you
have to pass to kernel additional boot argument with serial device that should
be used as a console. Before <code>bootm</code> set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv bootargs <span class="nv">console</span><span class="o">=</span>ttyAMA0
</span></code></pre></td></tr></table></div></figure>


<p>You should get something similar to below log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>...<span class="o">)</span>
</span><span class='line'>eth0: SMC91C11xFD <span class="o">(</span>rev 1<span class="o">)</span> at c89c8000 IRQ 57 <span class="o">[</span>nowait<span class="o">]</span>
</span><span class='line'>eth0: Ethernet addr: 52:54:00:12:34:56
</span><span class='line'>mousedev: PS/2 mouse device common <span class="k">for </span>all mice
</span><span class='line'>TCP: cubic registered
</span><span class='line'>NET: Registered protocol family 17
</span><span class='line'>VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0
</span><span class='line'>VFS: Cannot open root device <span class="s2">&quot;(null)&quot;</span> or unknown-block<span class="o">(</span>0,0<span class="o">)</span>: error -6
</span><span class='line'>Please append a correct <span class="s2">&quot;root=&quot;</span> boot option; here are the available partitions:
</span><span class='line'>1f00           65536 mtdblock0  <span class="o">(</span>driver?<span class="o">)</span>
</span><span class='line'>Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block<span class="o">(</span>0,0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0018afc&gt;<span class="o">]</span> <span class="o">(</span>unwind_backtrace+0x0/0xf0<span class="o">)</span> from <span class="o">[</span>&lt;c027af8c&gt;<span class="o">]</span> <span class="o">(</span>panic+0x80/0x1d0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c027af8c&gt;<span class="o">]</span> <span class="o">(</span>panic+0x80/0x1d0<span class="o">)</span> from <span class="o">[</span>&lt;c0343c64&gt;<span class="o">]</span> <span class="o">(</span>mount_block_root+0x1a0/0x258<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0343c64&gt;<span class="o">]</span> <span class="o">(</span>mount_block_root+0x1a0/0x258<span class="o">)</span> from <span class="o">[</span>&lt;c0343f08&gt;<span class="o">]</span> <span class="o">(</span>mount_root+0xf0/0x118<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0343f08&gt;<span class="o">]</span> <span class="o">(</span>mount_root+0xf0/0x118<span class="o">)</span> from <span class="o">[</span>&lt;c0344090&gt;<span class="o">]</span> <span class="o">(</span>prepare_namespace+0x160/0x1b4<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0344090&gt;<span class="o">]</span> <span class="o">(</span>prepare_namespace+0x160/0x1b4<span class="o">)</span> from <span class="o">[</span>&lt;c03438ec&gt;<span class="o">]</span> <span class="o">(</span>kernel_init_freeable+0x168/0x1ac<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c03438ec&gt;<span class="o">]</span> <span class="o">(</span>kernel_init_freeable+0x168/0x1ac<span class="o">)</span> from <span class="o">[</span>&lt;c027a074&gt;<span class="o">]</span> <span class="o">(</span>kernel_init+0x8/0xe4<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c027a074&gt;<span class="o">]</span> <span class="o">(</span>kernel_init+0x8/0xe4<span class="o">)</span> from <span class="o">[</span>&lt;c0013df0&gt;<span class="o">]</span> <span class="o">(</span>ret_from_fork+0x14/0x24<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is expected result.</p>

<p><a id="what-next"></a></p>

<h3>What next ?</h3>

<p>We happily built basic virtual development, what we need right now is some
<a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system">initial filesystem</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x4: Linux kernel for embedded system]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/"/>
    <updated>2013-06-07T10:33:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#a-little-history">A little history</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#get-linux-and-build-it">Get linux and build it</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#kudos">Kudos</a></li>
</ul>


<p><a id="a-little-history"></a></p>

<h3>A little history</h3>

<p>Thinking about embedded linux probably leads to  first try of porting linux to
different architecture. I did google research (I know I should probably read
mailing list archive) and found that there were few attempt to port linux to
different platform. There is no clear information about which port of linux was
first. This is probably because many hackers didn&rsquo;t report their effort. Arguably
earliest out-of-tree version was probably for Acron A5000 (arm), Motorola 68000
(m68k) around Spring/Summer of 1994. I found also notes about SPARC port in
1993. Some sources also tells story about 1993 Amiga and Atari port. But first
port that get in to official linux tree was DEC Alpha.<a href="http://digital-domain.net/lug/unix-linux-history.html">[1]</a><a href="http://www.arm.linux.org.uk/docs/history.php">[2]</a></p>

<p>So linux is already 22 years old and first port start when it was 2-3 years old,
so we can assume it is mature enough to support most of non-x86 architectures.</p>

<p><a id="get-linux-and-build-it"></a></p>

<h3>Get linux and build it</h3>

<p>To deal with our <em>embedded</em> board we need operating system or some kind of
software that will allow us to use board features. Right now to boot system we
need at least kernel. So we have to prepare kernel for board of choice
<code>versatilepb</code>.</p>

<p>Let&rsquo;s start with cloning Linux repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</span></code></pre></td></tr></table></div></figure>


<p>and configure kernel for <code>versatilepb</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd linux
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- versatile_defconfig</span></code></pre></td></tr></table></div></figure>


<p>It looks some feature is disabled in <code>versatile_defconfig</code>. I mean
<code>CONFIG_AEABI</code>. It specifies file format, data types, register usage and other
things. The main difference between EABI and ABI is that privileged instructions
are allowed in application code. More about EABI
<a href="http://en.wikipedia.org/wiki/Application_binary_interface#EABI">here</a>.
To enable this option run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig</span></code></pre></td></tr></table></div></figure>


<p>and go to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Kernel Features -&gt; Use the ARM EABI to compile the kernel</span></code></pre></td></tr></table></div></figure>


<p>We will also need DHCP and NFS support (CONFIG_IP_PNP_DHCP and CONFIG_ROOT_NFS).
First is <code>IP: DHCP support</code> and can be found under:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; Networking support (NET [=y])
</span><span class='line'>  -&gt; Networking options
</span><span class='line'>    -&gt; TCP/IP networking (INET [=y])
</span><span class='line'>      -&gt; IP: kernel level autoconfiguration (IP_PNP [=y])</span></code></pre></td></tr></table></div></figure>


<p>Second is :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; File systems
</span><span class='line'>  -&gt; Network File Systems (NETWORK_FILESYSTEMS [=y])  </span></code></pre></td></tr></table></div></figure>


<p>let&rsquo;s build image with U-Boot support.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- uImage</span></code></pre></td></tr></table></div></figure>


<p>We have kernel. How we can provide this kernel to our development environment ?
As I discuss in <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">previous post</a> we
can use bare-metal qemu, but not with uImage kernel. This is special U-Boot
kernel, so easiest way will be using it with bootloader. We will figure out how
to do this in <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board">next section</a>
about tftp and qemu network configuration.</p>

<p><strong>TODO</strong>: add picture of configuration in intro &ndash; vdb, link it here
Target configuration will consist on providing kernel through tftp server using U-Boot. Also
want to use NFS root filesystem to boot our small distro. As it is in real
development environment.</p>

<p><em>NOTE</em>: During compilation process you can encounter error like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>  UIMAGE  arch/arm/boot/uImage
</span><span class='line'>  "mkimage" command not found - U-Boot images will not be built
</span><span class='line'>  make[1]: *** [arch/arm/boot/uImage] Error 1
</span><span class='line'>  make: *** [uImage] Error 2</span></code></pre></td></tr></table></div></figure>


<p>Of course it means that we need mkimage to create U-Boot image, so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install uboot-mkimage</span></code></pre></td></tr></table></div></figure>


<p><em>Update</em>: in Debian jessie/sid this package was replaced by <code>u-boot-tools</code>.</p>

<p>We have to use uImage special build because load and execute address differes
from board to board. If we will use vmlinux image then addresses should be
manually modified. So using uImage is easiest</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://digital-domain.net/lug/unix-linux-history.html">UNIX/Linux History</a></br>
[2] <a href="http://www.arm.linux.org.uk/docs/history.php">The History of ARM Linux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x3: Embedded board bootloader]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/"/>
    <updated>2013-06-07T10:32:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#what-is-bootloader">What is bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#why-we-need-bootloader">Why we need bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#which-bootloader">Which bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#what-is-versatilepb">What is versatilepb ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#compilation">Compilation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#where-to-go-from-here">Where to go from here ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#kudos">Kudos</a></li>
</ul>


<p><a id="what-is-bootloader"></a></p>

<h3>What is bootloader ?</h3>

<p>It is a program written to bring up more complex code (eg. kernel).</p>

<p>On very simple system it can even not exist. Bootloader should prepare all
required hardware that kernel or different operating software will need at its
start point. It is hard to create cross platform bootloader because of variety
of system requirements.</p>

<p><a id="why-we-need-bootloader"></a></p>

<h3>Why we need bootloader ?</h3>

<p>The true is that we don&rsquo;t :) because we can simply pass kernel and initramfs as
parameters to QEMU, but it is not common practice for real development environment.<br/>
Usually bootloader is stripped in production environment where boot time is
crucial. Second thing, bootloader is useful to learn how real development
environment for embedded system works. From other side using bootloader we can
create single binary file that contain bootable embedded system, so we can run
it without giving multiple arguments at QEMU startup. I will try to keep in mind
idea about being as close to real development environment as possible.</p>

<p><a id="which-bootloader"></a></p>

<h3>Which bootloader ?</h3>

<p>There are many approaches to this problem. The most popular today is
<a href="http://www.denx.de/wiki/U-Boot">U-Boot</a> but there are alternatives like <a href="http://www.barebox.org/">The Barebox Bootloader</a>.
I will try to get to know them better in future. Right now I will use U-Boot as
Virtual Development Board bootloader to make the edit-compile-download-test cycle
similar to real world situation. So get the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone http://git.denx.de/u-boot.git
</span></code></pre></td></tr></table></div></figure>


<p>U-Boot configuration depends on pair cpu-board. So right now we know that our
cpu will be some ARM but what exactly ? It depends on configuration we will use.
In most scenarios presented in Internet the <code>versatilepb</code> was used. We can also
think about running different boards.</p>

<p>What pros U-Boot gives us in the light of previous question <code>Why we need
bootloader ?</code>:
* simplified process of porting kernel, because low level stuff is handled by
U-Boot
* simplified testing environment in easy way you can grab different version of
  kernel with different version of initrd and test it</p>

<p><a id="what-is-versatilepb"></a></p>

<h3>What is versatilepb ?</h3>

<p>According to <a href="http://www.arm.com/products/tools/development-boards/versatile/index.php">this page</a>
versatile is highly modular, feature-rich range of development board. <code>pb</code>
means <code>Platform Baseboard</code> integrated, standalone development system with fixed
CPU. But this is only corporate babble :)</p>

<p>QEMU shows <code>versatilepb</code> as Versatile/PB
(<a href="http://www.arm.com/products/processors/classic/arm9/arm926.php">ARM926EJ-S</a>).</p>

<p><a id="compilation"></a></p>

<h3>Compilation</h3>

<p>For <code>Emdebian</code> cross-toolchain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>u-boot
</span><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi- versatilepb_config
</span><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-
</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: If you wonder what is the convention for cross-toolchain prefix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>arch<span class="o">]</span>-<span class="o">[</span>vendor<span class="o">]</span>-<span class="o">[</span>os<span class="o">]</span>-<span class="o">[</span>abi<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Emdebian</code> striped vendor probably to keep name short, but for example
<code>Corsstool-NG</code> follow convetion and calls toolchain like
<code>arm-unknown-linux-gnueabi-</code>.</p>

<p><a id="where-to-go-from-here"></a></p>

<h3>Where to go from here ?</h3>

<p><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">Next step</a> will be kernel compilation for our virtual <code>versatilepb</code> board.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://www.linuxfordevices.com/c/a/Linux-For-Devices-Articles/Introduction-to-Das-UBoot-the-universal-open-source-bootloader/">Introduction to Das U-Boot, the universal open source bootloader</a></br>
[2] <a href="http://www.denx.de/wiki/U-Boot">U-Boot</a></br>
[3] <a href="http://forum.xda-developers.com/showthread.php?t=2201146">U-boot for the multi-boot support</a></br>
[4] <a href="http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/">Booting Linux with U-Boot on QEMU ARM</a></br>
[5] <a href="http://wiki.osdev.org/Bootloader">Bootloader</a></br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x2: Toolchain for Virtual Development Board]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/"/>
    <updated>2013-06-07T08:42:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#what-is-toolchain">What is toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#why-we-need-cross-toolchain">Why we need cross-toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#how-to-create-toolchain">How to create toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#emdebian-path">Emdebian path</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#summary">Summary</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#kudos">Kudos</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>This is probably the most complicated topic of all related to embedded
development but we need to deal with it at the beginning. I read a lot about
toolchains but still don&rsquo;t know enough to explain details. I think that best
answers are in crosstool-ng <a href="http://crosstool-ng.org/hg/crosstool-ng/file/0fc56e62cecf/docs">documentation</a>.</p>

<p><a id="what-is-toolchain"></a></p>

<h3>What is toolchain ?</h3>

<p><em>Toolchain</em> as the name said is a set of tools chained together, so output of
one tool is the input for different tool. This is well known concept in
Linux (eg. pipes). In embedded environment toolchain is called cross-toolchain or
cross-compiler, because usually it compiles on one architecture and generate
code for another (eg. it compiles on x86 and generate code for arm)<a href="http://elinux.org/Toolchains">[1]</a>.</p>

<p><a id="why-we-need-cross-toolchain"></a></p>

<h3>Why we need cross-toolchain ?</h3>

<p>I suspect that your laptop/PC is not based on ARM processor, most probably it based on
x86 architecture so you cannot simply compile code and run it in our
virtual-arm-based environment. To prepare operating system and tools for it we
need cross-toolchain.</p>

<p><a id="how-to-create-toolchain"></a></p>

<h3>How to create toolchain ?</h3>

<p>Process of creating cross-toolchain from scratch is not easy and takes some
time. There are few other ways to get toolchain, than creating it from scratch.
First we can use prebuilt toolchain providers like: <code>CodeSourcery</code>, <code>Linaro</code>, <code>DENX
EDLK</code> or <code>Emdebian</code>. Second we can create toolchain using special building system like: <code>Buildroot</code>, <code>Crosstool-NG</code>
or <code>Bitbake</code>. I will not deal with preparing toolchain in this series
because procedure for creating it takes pretty long. So we have two options:</p>

<ul>
<li>read my article about <a href="http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi">Crosstool-NG arm-unknown-linux-gnueabi</a></li>
<li>or install toolchain ready to use like <a href="http://www.emdebian.org/">Emdebian</a></li>
</ul>


<p><a id="emdebian-path"></a></p>

<h4>Emdebian path</h4>

<p>Add below lines to you <code>/etc/apt/sources.list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://ftp.uk.debian.org/emdebian/toolchains unstable main
</span></code></pre></td></tr></table></div></figure>


<p>Install Emdebian keys, update and install cross-compiler with all related
packages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install emdebian-archive-keyring
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install gcc-4.7-arm-linux-gnueabi
</span></code></pre></td></tr></table></div></figure>


<h5>Dependency problems during installation</h5>

<p>If above attempt to install cross-compiler ends with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pietrushnic@eglarest:~/src<span class="nv">$ </span>sudo apt-get install gcc-4.7-arm-linux-gnueabi
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>Reading state information... Done
</span><span class='line'>Some packages could not be installed. This may mean that you have
</span><span class='line'>requested an impossible situation or <span class="k">if </span>you are using the unstable
</span><span class='line'>distribution that some required packages have not yet been created
</span><span class='line'>or been moved out of Incoming.
</span><span class='line'>The following information may <span class="nb">help </span>to resolve the situation:
</span><span class='line'>
</span><span class='line'>The following packages have unmet dependencies:
</span><span class='line'> gcc-4.7-arm-linux-gnueabi : Depends: libgomp1-armel-cross <span class="o">(</span>&gt;<span class="o">=</span> 4.7.2-5<span class="o">)</span> but it
</span><span class='line'> is not going to be installed
</span><span class='line'> E: Unable to correct problems, you have held broken packages.
</span></code></pre></td></tr></table></div></figure>


<p>This means that Debian ustable cross-compiler is not available for you
configuration. You can read more about that
<a href="http://lists.debian.org/debian-embedded/2011/05/msg00029.html">here</a>.
To fix that issue simply change emdebian toochain repository to testing in
<code>/etc/apt/source.list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://ftp.uk.debian.org/emdebian/toolchains testing main
</span></code></pre></td></tr></table></div></figure>


<h5>Emdebian toolchain configuration</h5>

<p>Check where <code>arm-linux-eabi-gcc-4.7</code> was installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>whereis arm-linux-gnueabi-gcc-4.7
</span><span class='line'>arm-linux-gnueabi-gcc-4: /usr/bin/arm-linux-gnueabi-gcc-4.7 /usr/bin/X11/arm-linux-gnueabi-gcc-4.7
</span></code></pre></td></tr></table></div></figure>


<p>It is not linked to <code>arm-linux-gnueabi-gcc</code>, so we cannot give its prefix as <code>CROSS_COMPILE</code>
variable value, which is needed for bootloader and kernel compilation. We have to link
it to <code>arm-linux-gnueabi-gcc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /usr/bin/arm-linux-gnueabi-gcc-4.7 /usr/bin/arm-linux-gnueabi-gcc
</span></code></pre></td></tr></table></div></figure>


<p>Toolchain is ready to use.</p>

<p><em>Note</em>: I tried <code>CodeSourcery</code> toolchain <code>arm-2012.09-64-arm-none-linux-gnueabi.bin</code>,
but it contain <code>binutils</code> defect that not allow correctly build kernel. If you see
something like this in log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Error: selected processor does not support ARM mode <span class="sb">`</span>ldralt lr,<span class="o">[</span>r1<span class="o">]</span>,#4<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That means you experience same thing, please use <code>Emdebian</code> or <code>Crosstool-NG</code> toolchain.</p>

<p><em>Note 2</em>: If you&rsquo;re <code>Ubuntu</code> user I have to suggest experiments with toolchain
build by your own, because I get really hard times trying to go through this
tutorial with Ubuntu/Linaro cross compiler provided in repository. Finally I
used <a href="http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi">this</a>
to push things forward. U-boot compiled with Ubuntu/Linaro toolchain had problem
with <code>__udivsi3</code> instruction. This cause loop in initialization process.</p>

<p><a id="summary"></a></p>

<h3>Summary</h3>

<p>If you take effort of creating toolchain using <code>Crosstool-NG</code> than
congratulations.  But for simplifying whole <a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building"><strong>Virtual Development Board</strong></a>
series I will use <code>Emdebian</code> toolchain in further posts. Of course you can use
your brand new <code>Crosstool-NG</code> toolchain by simply remember that tools prefixes are
different. <code>Emdebian</code> uses <code>arm-linux-gnueabi-</code> and <code>Crosstool-NG</code> was created with
<code>arm-unknown-linux-gnueabi-</code>. Replace one with another every time when needed.
In <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">next post</a> we will deal with
bootloader.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://elinux.org/Toolchains">Toolchains</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x1: Qemu as an environment for embedded board emulation]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/"/>
    <updated>2013-06-07T08:27:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#compilation">Compilation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#kudos">Kudos</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>QEMU is a CPU emulator using dynamic binary translation to convert guest CPU
instructions into host CPU instructions<a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">[1]</a>. It supports many architectures from
x86, through ARM and MIPS, to MicroBlaze. According to compilation configuration
target list QEMU targets 26 different softmmu types.  Only for ARM it supports
33 machines (like ARM Versatile/PB (ARM926EJ-S) or Samsung NURI board
(Exynos4210)) and 28 CPUs (with cortex-a9 and pxa270). It gives access to
network, storage, video, usb, serial and other peripheral, also user defined. It
is developed under GNU GPL, so everybody are free to make modifications, improve
and extend it. This properties makes QEMU very good candidate for virtual board
emulator.</p>

<p><a id="compilation"></a></p>

<h3>Compilation</h3>

<p>Let&rsquo;s start creating our Virtual Development Board. As usually I will use latest
greatest version from git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone http://git.qemu.org/git/qemu.git
</span></code></pre></td></tr></table></div></figure>


<p>Compile it and install. Right now I will use only <code>arm-softmmu</code> target because it
will emulate whole arm system for me. ARM right now dominated big part of
embedded market but we will see if situation won&rsquo;t change in feature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>qemu
</span><span class='line'>./configure --target-list<span class="o">=</span>arm-softmmu
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>During configuration process you can encounter lack of <code>pixman</code>, just accept qemu
offer to initialize it as a submodule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule update --init pixman
</span><span class='line'>make <span class="c"># restart compilation process</span>
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>If compilation ends without problem than our first component is ready to use.
Right now we can emulate our ARM based board with many types of CPUs. List of
all available can be retrieved by running command <code>qemu-system-arm -cpu ?</code>, list
of emulated machines by <code>-M ?</code>. Now, let&rsquo;s talk about <a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board">toolchains</a>.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">Dynamically Translating x86 to LLVM using QEMU</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x0: Intro to Virtual Development Board building]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/"/>
    <updated>2013-06-07T01:27:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#preface">Preface</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#first-question">First question: How to start ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#virtual-development-board">Virtual Development Board &ndash; table of contents</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#kudos">Kudos</a></li>
</ul>


<p><a id="preface"></a></p>

<h3>Preface</h3>

<p>There are many reasons why ambitious programmers should care about huge rush in
embedded market. IMO there is great potential in it. I don&rsquo;t want to go deep into
this but take a look at all tablets, phones, smart TVs and other cool stuff
like wireless in you washing machine or refrigerator (ok this two are right now only a gadgets :) ).
This is all embedded. Another thing is that wages of experienced embedded
developers are really high.</p>

<p>This environment is very interesting. A lot to learn, a lot to do, so why not get
your hands dirty ?</p>

<p><a id="first-question"></a></p>

<h3>First question: How to start ?</h3>

<p>To do real embedded development, to learn the most, you simply buy hardware like
all this <code>${animal}board (animal={panda,beagle,hawk})</code>. This is the best way but
if you&rsquo;re beginner (like me) you probably don&rsquo;t want to spend $50 for stuff that
you throw away after month because you don&rsquo;t like to deal with it or problems
are not on your level, than maybe you should take a look around and wonder if it
is possible to build virtual environment to check what kind of problem you may
encounter learning embedded ? BTW this is cheap and fun, so potential ROI is big
enough to try.</p>

<p>IMHO this is where world going: proof of concept embedded platforms affordable
for common man (not only for US/West Europe), testing environment based on
virtualized/emulated solution, to check basic features, speed up testing, development
and deployment. That&rsquo;s why we see so active development of software like Qemu/KVM.</p>

<p><a id="virtual-development-board"></a></p>

<h3>Virtual Development Board &ndash; table of contents</h3>

<p>I realize that it is achievable and I will learn a lot trying to implement this
idea. Finally I was convinced reading <a href="http://www.elinux.org/Virtual_Development_Board">this</a>
two years old article on <a href="http://www.elinux.org">eLinux.org</a>.</p>

<p>I decide to divide this article on few parts because IMHO it was to big to read
it at once. Also people interesting in particular topic won&rsquo;t have to scrolling <code>&gt;2k</code>
words post. List of all articles in this series:</p>

<ol>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/">Qemu as an environment for embedded board emulation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/">Toolchain for Virtual Development Board</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/">Embedded board bootloader</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/">Linux kernel for embedded system</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/">Qemu network configuration and tftp for Virtual Development Board</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/">Root file system for embedded system</a></li>
</ol>


<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>At the and of this intro I want to give big kudos to all those hackers without
whom creating this article would not be possible. Thanks for sharing your
knowledge. Every time when I use knowledge that found by googling I&rsquo;m trying
to stick link for further reading.</p>

<h4><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation"><em>Ejoy!</em></a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress depoying problem after migrating to *.github.io]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/16/octopress-depoying-problem-after-migrating-to-star-dot-github-dot-io/"/>
    <updated>2013-05-16T22:20:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/16/octopress-depoying-problem-after-migrating-to-star-dot-github-dot-io</id>
    <content type="html"><![CDATA[<p>My story was that I migrate to new environment and want to recover my octopress
setup. I thought that it will be as simple as cloning my blog github repository
and start to work.</p>

<p>First problem that I experienced was lack of octopress repository as a remote
branch &ndash; it is required to update your ocotpress blog to latest code. Fix was
simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add octopress git://github.com/imathis/octopress.git</span></code></pre></td></tr></table></div></figure>


<p>After updating my blog I tried to deploy new article and I get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>ERROR: Repository not found.
</span><span class='line'>fatal: The remote end hung up unexpectedly</span></code></pre></td></tr></table></div></figure>


<p>I figured out that my github pages were incorrectly set, so I run <code>rake
setup_github_pages</code>. If you&rsquo;re user of github pages long enough you know that
few weeks ago github decide to migrate domain from <code>*.github.com</code> to
<code>*.github.io</code>. So I followed instructions in setup process and used <code>io</code> domain,
this is incorrect. If you have github repository for your pages with <code>com</code> in
name you should use your orginal repository address. Repository was not changed.
This is obvious but I lost few minutes to figure out whats going on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflow imporovement with Open Source tools - part 1]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/16/workflow-imporovement-with-open-source-tools/"/>
    <updated>2013-05-16T22:16:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/16/workflow-imporovement-with-open-source-tools</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>I want to start a series of articles to describe how I improve my workflow with
geeky Open Source applications. I will concentrate on terminal applications that
I try to use in my GTD process.</p>

<h3>Terminal</h3>

<h4>Solarized gnome-terminal</h4>

<p>If you already don&rsquo;t know what solarized color scheme is then please take a look
at <a href="http://ethanschoonover.com/solarized">this page</a>. To install solarized
colorscheme in gnome-terminal simply follow instruction from this <a href="https://github.com/sigurdga/gnome-terminal-colors-solarized">git repository</a>.</p>

<h3>Mutt again</h3>

<p>During last days I spent a lot of time to tweak my mutt configuration. Here I
will give you few hints about things that I learned.</p>

<h4>Solarized mutt</h4>

<p>To enable solarized colorscheme in mutt simply download one of scheme files from <a href="https://github.com/altercation/mutt-colors-solarized">github</a>. If you installed
dark scheme for your gnome-terminal then I suggest <code>mutt-colors-solarized-dark-16.muttrc</code>.
Copy this file for example to <code>$HOME/.mutt</code> and source it in muttrc file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source $HOME/.mutt/mutt-colors-solarized-dark-16.muttrc</span></code></pre></td></tr></table></div></figure>


<h4>Width of From column</h4>

<p>Usually from field in today&rsquo;s emails is longer than 19 characters. If this
happens mutt by default will not display whole string. To change this behavior
you can manipulate <code>index_format</code> variable. I set mine to 30:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set index_format="%4C %Z %{%b %d} %-30.30L (%4l) %s"</span></code></pre></td></tr></table></div></figure>


<h4>Sidebar</h4>

<p>Finally I gave up sidebar for using latest code without annoying <code>tls_socket_read</code> error.
Switching between IMAP folders is not so bad, you can quickly display all
folders by <code>c&lt;Tab&gt;&lt;Tab&gt;</code> or simply <code>y</code></p>

<h4>Offlineimap</h4>

<p>This is probably best program to synchronize your emails with local storage. It
also has feature that allow synchronization between different IMAP servers but
I&rsquo;m not using it. Few things are crucial when using <code>offlineimap</code>:</p>

<ul>
<li>probably easiest way to keep passwords secret is using python hooks for gnome-keyring,
detailed description how to integrate it with <code>offlineimap</code> is
<a href="http://www.clasohm.com/blog/one-entry?entry_id=90957">here</a>. Debian name of
<code>gnome-python2-gnomekeyring</code> is different: <code>python-gnomekeyring</code>.</li>
<li>Use meaningful <code>localfolders</code> because you will use it in <code>mutt</code> configuration</li>
</ul>


<p>Typical configuration of <code>$HOME/.offlineimaprc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mbnames]
</span><span class='line'>enabled = yes
</span><span class='line'>filename = ~/.mutt/muttrc.mailboxes
</span><span class='line'>header = "mailboxes "
</span><span class='line'>peritem = "+%(accountname)s/%(foldername)s"
</span><span class='line'>sep = " "
</span><span class='line'>footer = "\n"
</span><span class='line'>
</span><span class='line'>[general]
</span><span class='line'>metadata = ~/.offlineimap
</span><span class='line'>maxsyncaccounts = 5
</span><span class='line'>maxconnections = 2
</span><span class='line'>accounts = account1, account2
</span><span class='line'>status_backend = sqlite
</span><span class='line'>pythonfile = ~/.mutt/offlineimap.py
</span><span class='line'>
</span><span class='line'>[Account account1]
</span><span class='line'>autorefresh = 3
</span><span class='line'>localrepository = acc1_local
</span><span class='line'>remoterepository = acc1_remote
</span><span class='line'>
</span><span class='line'>[Repository acc1_local]
</span><span class='line'>type = Maildir
</span><span class='line'>localfolders = ~/.mail/account1
</span><span class='line'>
</span><span class='line'>[Repository acc2_remote]
</span><span class='line'>type = Gmail
</span><span class='line'>remoteusereval = get_username("account1")
</span><span class='line'>remotepasseval = get_password("account1")
</span><span class='line'>sslcacertfile = /etc/ssl/certs/ca-certificates.crt
</span><span class='line'>
</span><span class='line'>[Account account2]
</span><span class='line'>autorefresh = 3
</span><span class='line'>localrepository = acc2_local
</span><span class='line'>remoterepository = acc2_remote
</span><span class='line'>
</span><span class='line'>[Repository acc2_local]
</span><span class='line'>type = Maildir
</span><span class='line'>localfolders = ~/.mail/account2
</span><span class='line'>
</span><span class='line'>[Repository acc2_remote]
</span><span class='line'>type = Gmail
</span><span class='line'>remoteusereval = get_username("account2")
</span><span class='line'>remotepasseval = get_password("account2")
</span><span class='line'>sslcacertfile = /etc/ssl/certs/ca-certificates.crt</span></code></pre></td></tr></table></div></figure>


<p>What this means by section:</p>

<ul>
<li><code>[mbnames]</code> &ndash; automatically create mailboxes folders according to your
configuration on IMAP server</li>
<li><code>[general]</code> &ndash; most important things here are self explanatory accounts
variable and <code>max{syncaccounts,connections}</code>, first said how many accounts
should be synchronized and second how many simultaneous connections should be
used</li>
<li><code>[Account *]</code> &ndash; contain sync refresh time in minutes (<code>autorefresh</code>) and link
to local and remote repository definitions (<code>localrepository</code> and
<code>remoterepository</code>)</li>
<li><code>[Repository *]</code> &ndash; for local folder and its type and for remote gnome-keyring
configuration</li>
</ul>


<h4>Multiple account configuration</h4>

<p>To simplify multiple accounts configuration I added two things:</p>

<ul>
<li>separated account files configuration &ndash; in my case placed in <code>$HOME/.mutt/accounts</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set postponed   = +account1@server.com/Drafts
</span><span class='line'>set spoolfile   = +account1@server.com/INBOX
</span><span class='line'>set record      = +account1@server.com/Sent
</span><span class='line'>set from        = 'account1@server.com'
</span><span class='line'>set realname    = 'My Name'
</span><span class='line'>set smtp_url    = smtps://acc1@smtp.server.com:587
</span><span class='line'>set smtp_pass   = $my_pass
</span><span class='line'>set signature   = "~/.mutt/signature.example"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>folder hooks for particular account &ndash; it cause automatic loading of
configurations when folder was changed (in <code>$HOME/muttrc</code>):</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>folder-hook 'account1@server.com' 'source $HOME/.mutt/accounts/account1'</span></code></pre></td></tr></table></div></figure>


<h4>Separate mailing list file</h4>

<p>I keep my mailing list configuration file separated and source it in my
<code>$HOME/.muttrc</code>. I&rsquo;m not mailing list advanced user, so right now I have manually
created IMAP folders and Gmail filters to move mails from mailing list to this
folders. On the mutt side I use <code>subscribe</code> command to indicate that particular
mail id is a mailing list.</p>

<h3>Personal informations</h3>

<p>Some informations in my configuration files shouldn&rsquo;t be available for all. I
mean my email account configuration, my todo list, passwords and things like
that. To store this informations I use additional private git repository and use
it as a submodule for my workspace configuration. I wrote post about keeping
configuration using git
<a href="http://pietrushnic.github.io/blog/2012/02/19/improve-productivity-by-tracking-work">here</a> and
<a href="http://pietrushnic.github.io/blog/2012/02/20/improve-productivity-by-tracking-work_20">here</a>.</p>

<h3>Taskwarrior and vit</h3>

<p>I really like <code>taskwarrior</code> as a GTD tool but I was tired of writing everything
every time I wanted to change sth. I found <code>vit</code>. Vit is a vi-like interface
to task list generated by <code>taskwarrior</code> it works really great. Mostly it is
written in perl and there is no official repository for its code base but latest
version is from April 2013. I use lot of <code>project:</code> and <code>+flag</code> to update my
TODO list. I prefer <code>long</code> filter.</p>

<h4>My taskwarrior projects and flags</h4>

<p>I have few ongoing projects like <code>blog</code>, <code>productivity</code> and <code>ideas</code>. In addition I use
few flags like <code>ideas</code>, <code>finish</code>, <code>enhancement</code>, <code>fix</code> or <code>bug</code>. So when I
connect project and flag I get few categories like:</p>

<ul>
<li><code>blog ideas</code> for new articles ideas</li>
<li><code>blog finish</code> for articles that should be finished ASAP</li>
<li><code>blog bug/fix</code> for articles that have to be changed for some reason</li>
<li><code>productivity bug/fix</code> for productivity tools configuration improvements</li>
<li><code>productivity ideas</code> for new improvements</li>
</ul>


<h3>Summary</h3>

<p>I think this is enough for first post from this series. Hope it was helpful. If
yes then please share, if no then comment what I should improve. Thanks for
reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird to Mutt migration - tips & tricks]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/15/thunderbird-to-mutt-migration/"/>
    <updated>2013-05-15T18:40:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/15/thunderbird-to-mutt-migration</id>
    <content type="html"><![CDATA[<h3>Preface</h3>

<p>I migrate with my working environment to laptop. My workstation going older and
I don&rsquo;t have time to maintain few systems to keep it clean and in sync. I
probably have to improve my work flow but right now I have different problems.
Few weeks ago after changing environment to mobile and powerful laptop I also
changed OS to Ubuntu and mail client to Thunderbird. I have to admit that both
choices were mistake and I want to came back to Debian and Mutt. This post is
about throwing out Thunderbird and a logical continuation of Mutt tutorial (part
<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-1-setup-imap-account">1</a>, <a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-2-secure-login">2</a>,
<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-3-sidebar-urls-in-e">3</a> and <a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-4-html-mails-address">4</a>).</p>

<p>So what was wrong with Thunderbrid ?</p>

<ul>
<li>Not clear configuration settings &ndash; for example I tried to wrap word at 80th
character, default value was set to 72 but it seems not work anyway. I try to
use few googled hints but nothing works.</li>
<li>Setting up Thunderbird to work as a community developer tool was not so
obvious.</li>
<li>Junk messages was marked but default filter show everything so for some IMAP
boxes I get lot of spam and had hard time to find anything out there.</li>
<li>Conversation mode should be easily toggled.</li>
<li>GUI slow switching between different modes.</li>
<li>Lack of my editor of choice.</li>
</ul>


<p>If I decide to use GUI tool for some reason I require from it to be intuitive
and most of my options should be available at few clicks. Probably most of my
problems I could solve by giving enough effort to google it but if I have to
choose hard to configure MUA I will probably be in favor of terminal tool like
Mutt. So right now I&rsquo;m back with Mutt and determination to adjust Mutt to my
work flow.</p>

<h3>Git and undelete old configuration</h3>

<p>I won&rsquo;t go through whole Mutt tutorial once more time. I remember that there was
muttrc in my workspace git repository. So first goolge query returned what
needed I found <a href="http://stackoverflow.com/questions/953481/restore-a-deleted-file-in-a-git-repo">this</a> stackoverflow post.
I reverted muttrc and other related files deletion.</p>

<h3>Short informations</h3>

<ul>
<li>In Ubuntu there is no <code>gpg</code> package, to get encryption you can use <code>gpgsm</code>.</li>
<li>If your e-mail account provider require user name with <code>@</code> (at sign), then you
can pass it in mutt using below pattern:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set folder = imaps://[login]@[imap_server]/ # i.e. imaps://foo@bar.pl@imap.srv.pl/</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can debug Mutt using <code>-d 5</code> parameter, this option creates
<code>$HOME/.muttdebug0</code> file with verbose output, debug option can be changed in
range 1-5.</li>
<li>Use latest-greatest version compiled from source instead version provided
by distribution repository. It can help you get rid of problems like <code>tls_socket_read (Decryption has failed.)</code>.</li>
<li>Some accounts will not work with authenticating method presented in my
previous post about gpg (<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-2-secure-login">mutt tutorial part 2</a>).
To workaround this you can use different format of folder variable:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set folder = imaps://[login]:[passwd_var]@[imap_server]/ # i.e. imaps://foo:$my_bar_passwd@bar.pl@imap.srv.pl/</span></code></pre></td></tr></table></div></figure>


<h3>Compile Mutt from source</h3>

<p>If you looking for latest Mutt version consider compiling mutt by yourself.
First, download sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg clone http://dev.mutt.org/hg/mutt#HEAD
</span><span class='line'>hg update -C HEAD
</span><span class='line'>hg pull -u</span></code></pre></td></tr></table></div></figure>


<p>There are lot of options to prepare Mutt compilation, but right now I can
suggest this parameters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd mutt
</span><span class='line'>./prepare --with-ssl --enable-debug --enable-imap --enable-smtp --enable-pop \
</span><span class='line'>-enable-hcache --with-gss --with-gnutls --with-sasl
</span><span class='line'>make && sudo make install</span></code></pre></td></tr></table></div></figure>


<p>If make will complain about <code>gssapi/gssapi.h: No such file or directory</code> then
you need to install <code>libkrb5-dev</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libkrb5-dev</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>That&rsquo;s all in this post but I&rsquo;m sure that there will be next in this topic. I
hope to improve my whole workflow and write few posts about improving
productivity using open source tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux as screen replacement and productivity accelerator]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/04/06/tmux/"/>
    <updated>2013-04-06T05:29:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/04/06/tmux</id>
    <content type="html"><![CDATA[<p>As I wrote in <a href="http://pietrushnic.github.io/blog/2013/03/19/debian-switching-to-unstable">previous post</a> I
switched from GNU screen to <a href="http://tmux.sourceforge.net">tmux</a>. I use it for a
few moths and have to said that I&rsquo;m really impressed by simplicity, performance
and community support in this project. In this post I want to discuss my
configuration and useful additions for it like tmuxinator, session logging,
colors or status bar configuration.</p>

<h3>Basics</h3>

<p>Debian contain <code>tmux</code> package but for stable and testing release it is pretty
old version. Personally I use <code>unstable</code> version where <code>tmux</code> was delivered in
<code>1.7~svn2819-1</code> version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install tmux</span></code></pre></td></tr></table></div></figure>


<p>To start session simply type <code>tmux</code>. Tmux uses <code>C-b</code>/ <code>Ctrl-b</code> as a prefix for
commands. If you switch from GNU screen then at the beginning you can experience
some annoying situations but after few days everything should back to normal.</p>

<p>Most used keybiddings:</p>

<ul>
<li><code>C-b c</code> &ndash; create new window</li>
<li><code>C-b ,</code> &ndash; rename current window</li>
<li><code>C-b n</code> &ndash; next window</li>
<li><code>C-b p</code> &ndash; previous window</li>
<li><code>C-b l</code> &ndash; last window</li>
<li><code>C-b d</code> &ndash; disconnect</li>
<li><code>C-b k</code> &ndash; kill current window</li>
<li><code>C-b K</code> &ndash; kill tmux server</li>
<li><code>C-b [</code> &ndash; enter copy mode</li>
<li><code>C-b ]</code> &ndash; paste last copied buffer</li>
<li><code>C-b :</code> &ndash; tmux command line</li>
<li><code>C-b w</code> &ndash; windows list</li>
<li><code>C-b ?</code> &ndash; help</li>
</ul>


<p>Full list can be found <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;sektion=1#KEY+BINDINGS">here</a>.</p>

<h3>Configuration</h3>

<p>Tmux keeps its configuration in <code>$HOME/.tmux.conf</code>. My configuration mixes
some tmux examples with code that I found in the net. This file can be found on
my github repository <a href="https://github.com/pietrushnic/workspace/blob/master/dotfiles/tmux.conf">here</a>. First section contain some general configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># confirm before killing a window or the server
</span><span class='line'>bind-key k confirm kill-window
</span><span class='line'>bind-key K confirm kill-server
</span><span class='line'>
</span><span class='line'># toggle statusbar
</span><span class='line'>bind-key b set-option status
</span><span class='line'>
</span><span class='line'># ctrl+left/right cycles thru windows
</span><span class='line'>bind-key -n C-right next
</span><span class='line'>bind-key -n C-left prev
</span><span class='line'>
</span><span class='line'># scrollback buffer n lines
</span><span class='line'>set -g history-limit 10000
</span><span class='line'>
</span><span class='line'># listen for activity on all windows
</span><span class='line'>set -g bell-action any
</span><span class='line'>
</span><span class='line'># on-screen time for display-panes in ms
</span><span class='line'>set -g display-panes-time 2000
</span><span class='line'>
</span><span class='line'># start window indexing at one instead of zero
</span><span class='line'>set -g base-index 1
</span><span class='line'>
</span><span class='line'># enable wm window titles
</span><span class='line'>set -g set-titles on
</span><span class='line'>
</span><span class='line'># wm window title string (uses statusbar variables)
</span><span class='line'>set -g set-titles-string "tmux.#I.#W"
</span><span class='line'>
</span><span class='line'># statusbar 
</span><span class='line'>set -g display-time 2000</span></code></pre></td></tr></table></div></figure>


<p>After that I have implemented <a href="http://ethanschoonover.com/solarized">solarized</a> colors (dark theme):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>### COLOUR (Solarized dark)
</span><span class='line'>
</span><span class='line'># default statusbar colors
</span><span class='line'>set-option -g status-bg black #base02
</span><span class='line'>set-option -g status-fg yellow #yellow
</span><span class='line'>set-option -g status-attr default
</span><span class='line'>
</span><span class='line'># default window title colors
</span><span class='line'>set-window-option -g window-status-fg brightblue #base0
</span><span class='line'>set-window-option -g window-status-bg default
</span><span class='line'>#set-window-option -g window-status-attr dim
</span><span class='line'>
</span><span class='line'># active window title colors
</span><span class='line'>set-window-option -g window-status-current-fg brightred #orange
</span><span class='line'>set-window-option -g window-status-current-bg default
</span><span class='line'>#set-window-option -g window-status-current-attr bright
</span><span class='line'>
</span><span class='line'># use vi-like keys
</span><span class='line'>setw -g mode-keys vi
</span><span class='line'>
</span><span class='line'># pane border
</span><span class='line'>set-option -g pane-border-fg black #base02
</span><span class='line'>set-option -g pane-active-border-fg brightgreen #base01
</span><span class='line'>
</span><span class='line'># message text
</span><span class='line'>set-option -g message-bg black #base02
</span><span class='line'>set-option -g message-fg brightred #orange
</span><span class='line'>
</span><span class='line'># pane number display
</span><span class='line'>set-option -g display-panes-active-colour blue #blue
</span><span class='line'>set-option -g display-panes-colour brightred #orange</span></code></pre></td></tr></table></div></figure>


<p>To make solarized colors work on my setup was quite challenging, because there
are many things to set (vim, terminal, putty etc.). If you need any advice I can
write something about this. Right now it is beyond the scope of this post.</p>

<p>At the end of my tmux configuration I&rsquo;ve some fancy status bar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># clock
</span><span class='line'>set-window-option -g clock-mode-colour green #green
</span><span class='line'>
</span><span class='line'># center align the window list
</span><span class='line'>set -g status-justify centre
</span><span class='line'>
</span><span class='line'># show some useful stats but only when tmux is started 
</span><span class='line'># outside of Xorg, otherwise dwm statusbar shows these already
</span><span class='line'>set -g status-right ""
</span><span class='line'>set -g status-left ""
</span><span class='line'>if '[ -z "$DISPLAY" ]' 'set -g status-left "[#[fg=green] #H ][#[default]]"'
</span><span class='line'>if '[ -z "$DISPLAY" ]' 'set -g status-right "[ #[fg=magenta]#(cat /proc/loadavg | cut -d \" \" -f 1,2,3)#[default] ][ #[fg=cyan,bright]%a %Y-%m-%d %H:%M #[default]]"'
</span><span class='line'>if '[ -z "$DISPLAY" ]' 'set -g status-right-length 50'</span></code></pre></td></tr></table></div></figure>


<p>I think that mostly this is self explanatory. This how it look in work:
<a href="http://pietrushnic.github.io/assets/images/tmux-screen.png"><img class="center" src="http://pietrushnic.github.io/assets/images/tmux-screen.png" width="300" height="400"></a></p>

<h3>tmuxinator</h3>

<p>I spend some time to realize what is the best way of managing windows and panes
in tmux. Especially I was interested in setting some windows at tmux startup.
Finally I found <a href="https://github.com/aziz/tmuxinator">tmuxinator</a> small but useful
project delivered through <code>gem</code> system. Follow tmuxinator page to set it up
correctly. If you want to see my primitive configuration it is also available on
my github in <a href="https://github.com/pietrushnic/workspace/blob/master/dotfiles/tmux.conf">werkspace project</a>.</p>

<h3>Window logging</h3>

<p>Last hint I found on this
<a href="http://0xfeedface.org/blog/lattera/2012-03-19/using-tmux-screencasting-tool">blog</a>.
How to log your work in console for example to write a blog post :) ? There is a
universal method for piping all console output to our program of choice. For
example run command like this (command mode available under <code>C-b :</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pipe-pane -o 'cat &gt;&gt; ~/tmuxcast.#h.#T'</span></code></pre></td></tr></table></div></figure>


<p>This will give you file with logged session output (all curses windows, editor
windows and so on). Curses output can be unreadable because of control escape
sequences. Use <code>cat</code> it will interpret escape sequences in terminal.</p>

<p>As always I hope hints were useful. Please share this content if think its
valuable. Comment if you think id needs improvements. Thank you for reading.</p>

<p>P.S. I should probably create a footer with last paragraph :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet another quick build of arm-unknown-linux-gnueabi]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi/"/>
    <updated>2013-04-03T19:00:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi</id>
    <content type="html"><![CDATA[<p>So I decide to check what is going on with
<a href="http://crosstool-ng.org">crosstool-ng</a> and refresh my <a href="http://pietrushnic.github.io/blog/2012/03/14/quick-build-of-arm-unknown-linux">old post</a>
about building <code>arm-unknown-linux-gnueabi</code> toolchain. Last post was pretty
popular, so definitely this is direction I should follow :). I will not repeat
myself, so if you encounter any problems please check last post, section with
known problems in crosstool-ng <code>doc/</code> directory or RTFM. Let&rsquo;s begin:</p>

<h3>Get the latest crosstool-ng</h3>

<p>As usual I&rsquo;m trying to use latest version possible. Following the crosstool-ng page:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg clone http://crosstool-ng.org/hg/crosstool-ng
</span><span class='line'>cd crosstool-ng
</span><span class='line'>./bootstrap</span></code></pre></td></tr></table></div></figure>


<p>At the time of writing this article my changeset was <code>3200:0fc56e62cecf</code> 16 Mar
2013, two weeks old.</p>

<h3>Installation</h3>

<p>I prefer to use local directory for <code>ct-ng</code> in case it will change in feature I
will not need to mess with <code>/usr</code> subsystem. Simply tryin&#8217; to keep it clean when I can.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir $HOME/ct-ng
</span><span class='line'>./configure --prefix=$HOME/ct-ng
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<p>No problems on my up to date Debian wheezy.
You will probably want to add <code>$HOME/ct-ng</code> to your <code>PATH</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH="$HOME/ct-ng/bin:${PATH}"</span></code></pre></td></tr></table></div></figure>


<p>Add bash completion as it is advised in message at the end of compilation process. My <code>.bashrc</code>
automatically sources <code>$HOME/.bash_completion</code> so there is a place for local
code completion.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ct-ng.comp &gt;&gt; $HOME/.bash_completion</span></code></pre></td></tr></table></div></figure>


<h3>Build sample toolchain</h3>

<p>There is a long list of predefined samples toolchains which you can get build.
If <code>ct-ng</code> bash completion was correctly added, than you can explore it by <code>&lt;Tab&gt;</code> or simply
<code>ct-ng list-samples</code>. Let&rsquo;s try to build <code>arm-unknown-linux-gnueabi</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p $HOME/embedded/arm-unknown-linux-gnueabi
</span><span class='line'>cd $HOME/embedded/arm-unknown-linux-gnueabi
</span><span class='line'>ct-ng arm-unknown-linux-gnueabi</span></code></pre></td></tr></table></div></figure>


<p>Before you start build consider some debugging options to make build process
easier to continue when problems encountered.</p>

<h3>Additional debugging options</h3>

<p>crosstool-ng contain interesting mechanism of saving finished phases of
toolchain. This helps when for some reason our build process failed. To enable
this feature simply enter menuconfig:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ct-ng menuconfig</span></code></pre></td></tr></table></div></figure>


<p>Mark option <code>Paths and mix options -&gt; Debug crosstool-NG -&gt; Save intermediate steps</code>
as enabled. If something goes wrong you can check what last state was by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -lt .build/arm-unknown-linux-gnueabi/state</span></code></pre></td></tr></table></div></figure>


<p>Directory on top with the latest modification date is now your first state where you
should restart after fail. To restart build in given point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ct-ng &lt;state&gt;+ #assuming that &lt;state&gt; is where we fail last time</span></code></pre></td></tr></table></div></figure>


<p>Ordered list of possible states can be retrieved by <code>ct-ng list-steps</code>.</p>

<h3>Start build</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ct-ng build.4</span></code></pre></td></tr></table></div></figure>


<p><code>4</code> is the number of concurrent jobs and depends on your setup performance.
Building process takes a while so make coffee or anything else to drink :).</p>

<h3>Known problems</h3>

<p>I encounter few different problems than during <a href="http://pietrushnic.github.io/blog/2012/03/14/quick-build-of-arm-unknown-linux">previous building</a>.</p>

<h4>Missing expat library</h4>

<p>Signature looks like that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR]    configure: error: expat is missing or unusable
</span><span class='line'>[ERROR]    make[3]: *** [configure-gdb] Error 1
</span><span class='line'>[ERROR]    make[2]: *** [all] Error 2</span></code></pre></td></tr></table></div></figure>


<p>Simply install <code>libexpat</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libexpat1-dev</span></code></pre></td></tr></table></div></figure>


<h4>gcj internal error</h4>

<p>Few times I encountered something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ERROR]    gcj: internal compiler error: Killed (program jc1)
</span><span class='line'>[ERROR]    make[5]: *** [ecjx] Error 4
</span><span class='line'>[ERROR]    make[4]: *** [all-recursive] Error 1
</span><span class='line'>[ERROR]    make[3]: *** [all-target-libjava] Error 2
</span><span class='line'>[ERROR]    make[2]: *** [all] Error 2</span></code></pre></td></tr></table></div></figure>


<p>The reason is that <code>oom_kiler</code> takes care about <code>gcj</code>. It means that you run out
of memory during compilation Java related code. I experience that when trying to
build toolchain with 512MB of RAM :)</p>

<p>So this was short reminder. I work on new post about creating virtual
embedded development environment based on <a href="http://wiki.qemu.org/Main_Page">qemu</a>.
I was inspired by <a href="http://www.elinux.org/Virtual_Development_Board">this article</a>.
Hope this article was useful. If you have any comments or difficulties please
comment below. If think this post was useful &ndash; share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Music for programming]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/03/30/music-for-programming/"/>
    <updated>2013-03-30T03:27:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/03/30/music-for-programming</id>
    <content type="html"><![CDATA[<p>Of course this is strongly associated with personal taste but I will write my
experience.</p>

<ol>
<li><a href="www.pandora.com">www.pandora.com</a> &ndash; really great radio station, choose your
genre or artist and it will lead you through all variety of this type.
unfortunately if you are fan of Iron Maiden, Blind Guardian, prog rock or
irish folk you will be bored after 2 hours or less. Sadly not available in
Poland :( &ndash; maybe some proxy will work but I wasn&rsquo;t able to find one.</li>
<li><a href="http://www.kohina.com/">kohina/demo scene</a> &ndash; very good radio for long night
coding sessions. I&rsquo;m not big fan of demo scene but I appreciate what guys do
and did. And somtimes you will hit Super Mario or Contra theme.</li>
<li><a href="http://www.progarchives.com/subgenre.asp?style=32">post rock/math rock</a> &ndash; if you like any variety of prog rock you probably
know <a href="http://www.progarchives.com/">ProgArchives</a>. It is really hard to find
good prog rock radio where classics are well mixed with newcomers. I really
like to listen guys like <a href="http://www.progarchives.com/subgenre.asp?style=32">God Is An Astronaut</a>,
<a href="http://www.explosionsinthesky.com/">Explosions In The Sky</a>, <a href="http://twdy.tumblr.com/">This Will Destroy You</a>,
<a href="http://www.65daysofstatic.com/">65daysofstatic</a>, <a href="http://www.redsparowes.com/News.aspx">Red Sparowes</a> or even
<a href="http://mogwai.sandbag.uk.com/lesrevenants/">Mogwai</a> or <a href="http://www.sigur-ros.co.uk/">Sigur Ros</a>.
Very good for programming if you drink cofee/tea :)</li>
<li>movie soundtracks &ndash; This one I use when really need to concentrate
especially when working daylight hours. What&rsquo;s best here most of people will
agree that <a href="http://www.enniomorricone.it/uk/news.php">Ennio Moricone</a>, <a href="http://elsew.com/">Vangelis</a> and <a href="http://www.hans-zimmer.com/">Hans Zimmer</a>
are famous one and most recognizable for my generation.</li>
<li><a href="http://nsbradio.co.uk/content/">breakbeat</a> &ndash; this one reminds me some stories about mythical cyberpunk
hackers, its usually noisy and help me isolate from environment and
concentrate on my work. I will said that if you like freaked electronics than
you can try this.</li>
<li><a href="http://www.shoutcast.com/Internet-Radio/drum%20and%20base">dnb</a> &ndash; if
breakbeat is to hard for you try this :). This music tune me in channel of
rhythmical work.</li>
<li>When googling this topic I found <a href="http://musicforprogramming.net/">this site</a>
it was worth to check. Some links are broken. Most of those playlists have too
low tempo for me.</li>
</ol>


<p>I can also suggest some Irish Folk influenced stuff if don&rsquo;t have &ldquo;The End is
near&rdquo; wallpaper on your desktop :) There was a time when I was listen a lot of
psybient, but it is really hard to find good psychodelic ambient radio and this
music is for me more like movie soundtracks I cannot listen it at night.
Hope it will give some kind of direction. Let me know what you listen when coding.
Maybe I will discover new universe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux multiplexer and vi-like keys in copy-mode]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/03/19/debian-switching-to-unstable/"/>
    <updated>2013-03-19T16:30:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/03/19/debian-switching-to-unstable</id>
    <content type="html"><![CDATA[<p>So I tried to write second post for my new blog but to effectively work using
terminal I need terminal multiplexer. I switched to tmux from screen
because I reach point that I can&rsquo;t do some things in it in easy way and
performance was poor. Also activity of tmux developers is better than for gnu
screen. I also experienced annoy buffer crashing especially after come back from
lock mode or cmatrix much but after reading few articles about alternative for
screen I switched to tmux.</p>

<p>It seems that in wheezy(testing) version of tmux is outdated (1.6.2). Last tag
on tmux <a href="http://sourceforge.net/p/tmux/tmux-code/?source=navbar">sourceforge repo</a>
is 1.7 and there is almost 300 additional commits on top of the master branch.
Debian unstable contain version 1.7.2 it is pretty new.</p>

<p>Awesome thing in tmux is emacs/vi keybiding for copy-mode. It really helps with
writing technical articles about linux stuff with this console outputs and logs
excerpts.</p>

<p>To enable copy-mode in vi like way put to <code>$HOME/.tmux.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># use vi-like keys</span>
</span><span class='line'>setw -g mode-keys vi
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet another blogger switched to Octopress]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/03/19/another-blogger-switched-to-octopress/"/>
    <updated>2013-03-19T03:01:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/03/19/another-blogger-switched-to-octopress</id>
    <content type="html"><![CDATA[<h3>1. Introduction</h3>

<p>It&rsquo;s been over 3 months when I published my last post. In chaos of daily jobs I
realize that there is so much things that I don&rsquo;t like in Google Blogger that I
have to find different solution for my blogging aspirations. So first of all
requirements, what do I hate most in Blogger:</p>

<ul>
<li> <strong>editor</strong> &ndash; I used to vim and cannot stand that there is no bracket matching,
vertical/block modification, and other cool stuff that I use</li>
<li> <strong>the way that page was stored</strong> &ndash; I want to have control on my blog and if I can
use for example git to track its content that would be great</li>
<li>  <strong>lamish</strong> &ndash; with Blogger I learned nothing, I look for something related with new
trends in web development, it looks that ruby on rails is the most interesting
framework</li>
</ul>


<p>And I found <a href="http://octopress.org">Octopress</a> it has all I need. The page states
&ldquo;A blogging framework for hackers&rdquo;. I don&rsquo;t know if I can or should call myself
hacker but the idea is great for me.</p>

<p>So I start to move my blog to Octopress. Of course there is a plenty of things
to do but also many to learn.</p>

<p>Lets start with first part of hints that I found useful:</p>

<h3>2. Blogger post conversion to markdown and import to Octopress</h3>

<p><strong>Update</strong>: <em>after I wrote this post I found interesting article on <a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">this page</a></em></p>

<ul>
<li>Export Blogger posts.
To do this go to your blog <code>Design-&gt;Settings-&gt;Other-&gt;Export blog-&gt;Donwload blog</code></li>
<li>Convert xml to html files.
I used latest modification of <a href="https://gist.github.com/dnagir/1765496/forks">import.rb</a>
but you probably can find better solution.</li>
<li>Convert html files to markdown for example by using <a href="https://github.com/xijo/reverse_markdown">reverse_markdown</a>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install reverse_markdown
</span><span class='line'>d path/with/your/html/files
</span><span class='line'>find -name <span class="s2">&quot;*.html&quot;</span> | sed -e <span class="s1">&#39;s/\.html//&#39;</span> | xargs -n 1 -I @ sh -c <span class="s1">&#39;reverse_markdown @.html &gt; @.markdown&#39;</span>
</span><span class='line'>mv *.markdown path/to/your/octopress/source/_posts/
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>At the end of this process you should take a look at generated code, so setup
your octopress and run <code>rake preview</code></li>
<li>Fix syntax and enjoy your posts in markdown.

<ul>
<li>useful thing here for me was markdown syntax highlighting in vim by tpope
<a href="https://github.com/tpope/vim-markdown">vim-markdown</a></li>
<li>liquid syntax <a href="https://github.com/tpope/vim-liquid">vim-liquid</a></li>
<li>also setting spellchecker could be useful, add below line to your <code>$HOME/.vimrc</code>
and you will get spell cheking with en_us dictionary and word wraping on 80
character:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="err">&quot;</span> blogging with markdown
</span><span class='line'>au BufRead,BufEnter *.markdown setlocal <span class="nv">textwidth</span><span class="o">=</span>80 formatoptions+<span class="o">=</span>w spell <span class="nv">spelllang</span><span class="o">=</span>en_us
</span></code></pre></td></tr></table></div></figure>


<h3>3. Octopress configuration &ndash; tricks that I used for this blog</h3>

<ul>
<li>Configure your social networks as it was explained in <a href="http://octopress.org/docs/configuring">Octopress documentation</a></li>
<li>It is good to register on <a href="http://disqus.com/">Disqus</a> the idea of keeping
comments separated from blog is very good. I realized it when was trying
migrate my comments from Blogger and didn&rsquo;t have installed Disqus.</li>
<li><a href="http://www.google.com/analytics/">Google Analytics</a> and <a href="http://www.addthis.com/">AddThis</a>
also are very helpful in tracking how your content was shared and what of this
stuff has greatest interest. I will write article how to integrate <a href="http://www.addthis.com/">AddThis</a>
because there is lack of information about it in google.</li>
<li>Header background image can be changed by dealing with sass files. I did this
in <code>sass/custom/_layout.scss</code> using below lines:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">header</span><span class="o">[</span><span class="nt">role</span><span class="o">=</span><span class="s2">&quot;banner&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(/images/header_bg2_1200x168.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If you add some background you probably want to set position of your title and
subtitle. You can do this in the same file as background image using something
like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span><span class="m">6.6em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span><span class="k">bold</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span><span class="k">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span><span class="m">3em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Do not forget about updating your Octopress frequently. Instructions how to do
that can be found in <a href="http://octopress.org/docs/updating/">documentation</a></li>
</ul>


<h3>4. SEO</h3>

<p>Most interesting article about SEO is surprisingly on top of google search <a href="http://www.yatishmehta.in/seo-for-octopress">&lsquo;octopress seo&rsquo;</a>.
Main thing that I take from the article is that Octopress already have built in
support for SEO by additional elements in post header. This elements are <code>keywords:, description:</code>
for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">---</span>
</span><span class='line'><span class="nt">layout</span><span class="o">:</span> <span class="nt">post</span>
</span><span class='line'><span class="nt">title</span><span class="o">:</span> <span class="s2">&quot;Another blogger switched to Octopress&quot;</span>
</span><span class='line'><span class="nt">date</span><span class="o">:</span> <span class="nt">2013-03-19</span> <span class="nt">03</span><span class="nd">:01</span>
</span><span class='line'><span class="nt">comments</span><span class="o">:</span> <span class="nt">true</span>
</span><span class='line'><span class="nt">categories</span><span class="o">:</span> <span class="s2">&quot;about this blog&quot;</span>
</span><span class='line'><span class="nt">published</span><span class="o">:</span> <span class="nt">false</span>
</span><span class='line'><span class="nt">keywords</span><span class="o">:</span> <span class="nt">blog</span><span class="o">,</span><span class="nt">octopress</span><span class="o">,</span><span class="nt">blogger</span><span class="o">,</span><span class="nt">configuration</span><span class="o">,</span><span class="nt">seo</span><span class="o">,</span><span class="nt">tricks</span>
</span><span class='line'><span class="nt">description</span><span class="o">:</span> <span class="nt">Octopress</span> <span class="nt">configuration</span>
</span><span class='line'><span class="nt">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>Octopress will use keywords and description to build meta section of every
website on your blog.</p>

<p>To not forget keyword and description section in my posts I modified Rakefile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Rakefile b/Rakefile</span>
</span><span class='line'><span class="gh">index d3a1cb0..3e2ced7 100644</span>
</span><span class='line'><span class="gd">--- a/Rakefile</span>
</span><span class='line'><span class="gi">+++ b/Rakefile</span>
</span><span class='line'><span class="gu">@@ -111,6 +111,9 @@ task :new_post, :title do |t, args|</span>
</span><span class='line'>     post.puts &quot;date: #{Time.now.strftime(&#39;%Y-%m-%d %H:%M&#39;)}&quot;
</span><span class='line'>     post.puts &quot;comments: true&quot;
</span><span class='line'>     post.puts &quot;categories: &quot;
</span><span class='line'><span class="gi">+    post.puts &quot;published: false&quot;</span>
</span><span class='line'><span class="gi">+    post.puts &quot;keywords:&quot;</span>
</span><span class='line'><span class="gi">+    post.puts &quot;description:&quot;</span>
</span><span class='line'>     post.puts &quot;---&quot;
</span><span class='line'>   end
</span><span class='line'> end
</span></code></pre></td></tr></table></div></figure>


<h3>5. Others</h3>

<p>Few things that were not so obvious for me:</p>

<ul>
<li>to create category name that contain few words like <code>about this blog</code> syntax
like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>categories:
</span><span class='line'> - about this blog
</span></code></pre></td></tr></table></div></figure>


<p>not like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>categories: about this blog # or &quot;about this blog&quot;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ordered and unordered lists are not indented by default, this code in <code>sass/custom/_layout.scss</code>
fix this behavior:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">article</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ol</span><span class="o">,</span> <span class="n">ul</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">3em</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this tips are useful for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short hint for all those who use vim and pathogen]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/01/15/short-hint-for-all-those-who-use-vim/"/>
    <updated>2013-01-15T11:51:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/01/15/short-hint-for-all-those-who-use-vim</id>
    <content type="html"><![CDATA[<p>Today, after updating my wokspace to latest version I encounter below error during vim running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error detected while processing function pathogen#runtime_append_all_bundles:
</span><span class='line'>line 1:
</span><span class='line'>E121: Undefined variable: source_path
</span><span class='line'>E116: Invalid arguments for function string(source_path).') to pathogen#incubate('.string(source_path.'/{}').')') 
</span><span class='line'>E116: Invalid arguments for function 4_warn
</span><span class='line'>Press ENTER or type command to continue</span></code></pre></td></tr></table></div></figure>


<p>Quick look on pathogen runtime_append_all_bundles function and I found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>call s:warn<span class="o">(</span><span class="s1">&#39;Change pathogen#runtime_append_all_bundles(&#39;</span>.string<span class="o">(</span>a:1<span class="o">)</span>.<span class="s1">&#39;) to pathogen#incubate(&#39;</span>.string<span class="o">(</span>a:1.<span class="s1">&#39;/{}&#39;</span><span class="o">)</span>.<span class="s1">&#39;)&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So simply replacing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>call pathogen#runtime_append_all_bundles<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>call pathogen#incubate<span class="o">()</span> in <span class="nv">$HOME</span>/.vimrc fix the problem.
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sqlite3 gem not supported on Heroku]]></title>
    <link href="http://pietrushnic.github.io/blog/2012/11/18/sqlite3-gem-not-supported-on-heroku/"/>
    <updated>2012-11-18T21:16:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2012/11/18/sqlite3-gem-not-supported-on-heroku</id>
    <content type="html"><![CDATA[<p>When I tried to deploy second part of <a href="http://ruby.railstutorial.org/chapters/a-demo-app#top">RoR tutorial</a>
to Heroku I get this error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>An error occurred while installing sqlite3 (1.3.5), and Bundler cannot continue.  
</span><span class='line'>Make sure that `gem install sqlite3 -v '1.3.5'` succeeds before bundling.
</span><span class='line'>!
</span><span class='line'>!  Failed to install gems via Bundler.
</span><span class='line'>!
</span><span class='line'>! Detected sqlite3 gem which is not supported on Heroku.
</span><span class='line'>!  http://devcenter.heroku.com/articles/how-do-i-use-sqlite3-for-development
</span><span class='line'>!
</span><span class='line'>!  Heroku push rejected, failed to compile Ruby/rails app
</span><span class='line'>To git@heroku.com:thawing-beyond-7283.git 
</span><span class='line'>! [remote rejected] master -&gt; master (pre-receive hook declined)
</span><span class='line'>error: failed to push some refs to 'git@heroku.com:thawing-beyond-7283.git'</span></code></pre></td></tr></table></div></figure>


<p>I searched a little bit about this error and find <a href="http://stackoverflow.com/questions/3747002/heroku-rails-3-and-sqlite3">this</a>
stackoverflow post. But when I look more carefully on the Gemfile syntax I
found a mistake. I used simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.5&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I should have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.5&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="s1">&#39;0.12.2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As RoR tutorial states.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prepare for Ruby on Rails on Debian wheezy]]></title>
    <link href="http://pietrushnic.github.io/blog/2012/11/18/prepare-for-ruby-on-rails-on-debian/"/>
    <updated>2012-11-18T18:18:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2012/11/18/prepare-for-ruby-on-rails-on-debian</id>
    <content type="html"><![CDATA[<p>I start to learn Ruby on Rails. As always when you learn new programming
language toolchain is required. In this tutorial I will try to go through
toolchain preparation for my Debian wheezy. Of course I based on Vim as my
editor of choice. Second requirement will be using some parts of toolchain in
latest greatest version.</p>

<p>As a beginner point for learning Ruby on Rails I choose <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">this tutorial</a>.
I will try to use their methods of setting environment adding my comments where
it is needed. Also will resolve Debian and Vim specific issues. So let&rsquo;s begin.</p>

<p>After quick look at RoR tutorial I have to switch to <a href="http://blog.sudobits.com/2012/05/02/how-to-install-ruby-on-rails-in-ubuntu-12-04-lts/">this site</a>
for installation for Ubuntu 12.04 LTS. But instructions don&rsquo;t work as expected
for my Debian. So after quick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install git curl
</span></code></pre></td></tr></table></div></figure>


<p>I realized that I need proxy for curl and not only temporary but permanent. I
added below line to my <code>$HOME/.curlrc:</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">proxy</span><span class="o">=</span>proxy.server.com:8080
</span></code></pre></td></tr></table></div></figure>


<p>After that I was able to download and install stable version of rvm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure>


<p>Next I sourced configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.rvm/scripts/rvm
</span></code></pre></td></tr></table></div></figure>


<p>Output which I get was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pietrushnic@lothlann:~/src/node<span class="nv">$ </span>rvm requirements
</span><span class='line'>Requirements <span class="k">for </span>Linux <span class="s2">&quot;Debian GNU/Linux wheezy/sid&quot;</span>
</span><span class='line'>NOTE: <span class="s1">&#39;ruby&#39;</span> represents Matz<span class="s1">&#39;s Ruby Interpreter (MRI) (1.8.X, 1.9.X)</span>
</span><span class='line'><span class="s1">             This is the *original* / standard Ruby Language Interpreter</span>
</span><span class='line'><span class="s1">      &#39;</span>ree<span class="s1">&#39;  represents Ruby Enterprise Edition</span>
</span><span class='line'><span class="s1">      &#39;</span>rbx<span class="s1">&#39;  represents Rubinius</span>
</span><span class='line'>
</span><span class='line'><span class="s1">bash &gt;= 4.1 required</span>
</span><span class='line'><span class="s1">curl is required</span>
</span><span class='line'><span class="s1">git is required (&gt;= 1.7 for ruby-head)</span>
</span><span class='line'><span class="s1">patch is required (for 1.8 rubies and some ruby-head&#39;</span>s<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>To install rbx and/or Ruby 1.9 head <span class="o">(</span>MRI<span class="o">)</span> <span class="o">(</span>eg. 1.9.2-head<span class="o">)</span>,
</span><span class='line'><span class="k">then </span>you must install and use rvm 1.8.7 first.
</span><span class='line'>
</span><span class='line'>Additional Dependencies:
</span><span class='line'><span class="c"># For Ruby / Ruby HEAD (MRI, Rubinius, &amp; REE), install the following:</span>
</span><span class='line'>ruby: /usr/bin/apt-get install build-essential openssl libreadline6
</span><span class='line'>libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev
</span><span class='line'>libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev
</span><span class='line'>automake libtool bison subversion pkg-config
</span><span class='line'>
</span><span class='line'><span class="c"># For JRuby, install the following: jruby: /usr/bin/apt-get install curl g++ </span>
</span><span class='line'>openjdk-6-jre-headless jruby-head: /usr/bin/apt-get install ant openjdk-6-jdk <span class="c"># </span>
</span><span class='line'>For IronRuby, install the following: ironruby: /usr/bin/apt-get install curl
</span><span class='line'>mono-2.0-devel
</span></code></pre></td></tr></table></div></figure>


<p>I need Ruby so copy&amp;paste line for it and:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential openssl libreadline6 libreadline6-dev curl
</span><span class='line'>git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3
</span><span class='line'>libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison
</span><span class='line'>subversion pkg-config
</span></code></pre></td></tr></table></div></figure>


<p>Next thing we need is Node.js because this code of JavaScript runtime is under
active development (latest version is 0.8.14 and Debian provided for sid 0.6.19)
we use its latest greatest version from git repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/joyent/node.git
</span></code></pre></td></tr></table></div></figure>


<p>Following by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>node;./configure;make;make <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my configuration only one test failed test-tls-server-verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Running <span class="s1">&#39;Allow both authed and unauthed connections with CA1&#39;</span>
</span><span class='line'>  throw new assert.AssertionError<span class="o">({</span>
</span><span class='line'>          ^
</span><span class='line'>  AssertionError: agent1 rejected, but should NOT have been
</span><span class='line'>     at ChildProcess.&lt;anonymous&gt;
</span><span class='line'>      <span class="o">(</span>/home/pietrushnic/src/node/test/simple/test-tls-server-verify.js:217:14<span class="o">)</span>
</span><span class='line'>          at ChildProcess.EventEmitter.emit <span class="o">(</span>events.js:96:17<span class="o">)</span>
</span><span class='line'>      at Process.ChildProcess._handle.onexit
</span><span class='line'>      <span class="o">(</span>child_process.js:698:12<span class="o">)</span>
</span><span class='line'>      at process._makeCallback <span class="o">(</span>node.js:248:20<span class="o">)</span>
</span><span class='line'>      &lt;/anonymous&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This is known issue probably we have to wait for update of OpenSSL library in
wheezy. Ignore this problem and install node.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Because of RoR tutorial requirements we install version 1.9.3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm get head <span class="o">&amp;&amp;</span> rvm reload rvm install 1.9.3
</span></code></pre></td></tr></table></div></figure>


<p>Next thing will be adding vim-ruby for our favorite editor Vim. I organize my
dotfiles using git. I also use pathogen to control Vim plugins (as described
<a href="http://pietrushnic.blogspot.com/2012/02/improve-productivity-by-tracking-work_20.html">here</a>),
so :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>workspace
</span><span class='line'>git submodule add https://github.com/tpope/vim-rails.git
</span><span class='line'>dotfiles/vim/bundle/vim-rails
</span><span class='line'>git submodule init <span class="o">&amp;&amp;</span> git submodule update
</span><span class='line'>git commit -m <span class="s2">&quot;vim-rails submodule added&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have ready to use Ruby on Rails development environment based on Vim.
I suggest to take a look at this
<a href="https://www.youtube.com/watch?v=30P8DSNOZuU">movie</a> and after that dive into 
<a href="http://ruby.railstutorial.org/">tutorial</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New background and not so big "coming back"]]></title>
    <link href="http://pietrushnic.github.io/blog/2012/11/13/new-background-and-not-so-big-coming/"/>
    <updated>2012-11-13T00:04:00+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2012/11/13/new-background-and-not-so-big-coming</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since I last wrote anything on the blog. Because I hear complains about the background causing my blog hard to read I decide to change it.</p>

<p>I have little break in my side project and noticed that most read posts are related to some technical workarounds and solutions for different problems I decide to write a series about gcc errors and some solutions for it. I know it may sound like some complete spam and trash for blog, but when I searched for some explanation and solution of this errors sometimes it was hard to find them, sometimes it was hard to match with my code and finally sometimes I was unable to understand what is going on. I want to share what I learned and even if it wouldn&rsquo;t help anyone I want to have this in one place.</p>

<p>Recently I returned to my long-neglected hobby &ndash; chess. I will also try to write something constructive in this topic. Last time I also think a lot about embedded stuff (trying to reverse my printer), android (writing little project helping my colleague) and many other things. So maybe I will write about this. To not be boring I will simply get my hands dirty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutt tutorial part 4 - html mails, address book and other useful features]]></title>
    <link href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-4-html-mails-address/"/>
    <updated>2012-05-13T17:21:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-4-html-mails-address</id>
    <content type="html"><![CDATA[<p>How mutt can handle mails in html format ? Takling about html mail handling is
talking about handling any type of <a href="http://en.wikipedia.org/wiki/MIME">Multipurpose Internet Mail Extensions</a>.
Mutt supports handling for all MIME types in one place for all programs. This
place is <code>.mailcap</code> file. Googling a little bit I found below mailcap file
configuration (kudos to <a href="http://trembits.blogspot.com/2011/12/viewing-html-in-mutt.html">Bart Nagel</a>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text/html; pandoc -f html -t markdown; copiousoutput; description=HTML Text; test=type pandoc &gt;/dev/null
</span><span class='line'>text/html;lynx -stdin -dump -force\_html -width 70; copiousoutput; description=HTML Text; test=type lynx &gt;/dev/null
</span><span class='line'>text/html; w3m -dump -T text/html -cols 70; copiousoutput; description=HTML Text; test=type w3m &gt;/dev/null
</span><span class='line'>text/html; html2text -width 70; copiousoutput; description=HTML Text; test=type html2text &gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p>Of course we need to install all applications to make mailcap work correct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install pandoc lynx w3m html2text
</span></code></pre></td></tr></table></div></figure>


<p>To bring address book functionality to mutt we need abook application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install abook
</span></code></pre></td></tr></table></div></figure>


<p>Also few new line in <code>$HOME/.muttrc</code> will be needed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># add alias file for addresses</span>
</span><span class='line'><span class="nb">set </span><span class="nv">alias_file</span><span class="o">=</span>~/.mutt/alias <span class="nb">source</span> ~/.mutt/alias
</span><span class='line'><span class="c"># configure addressbook</span>
</span><span class='line'><span class="nb">set </span><span class="nv">query_command</span><span class="o">=</span> <span class="s2">&quot;abook --mutt-query &#39;%s&#39;&quot;</span>
</span><span class='line'>macro index,pager A <span class="s2">&quot;&lt;pipe-message&gt;</span>
</span><span class='line'><span class="s2">abook --add-email-quiet&lt;return&gt;&quot;</span> <span class="s2">&quot;add the sender address to abook&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding new address simply create entry in alias file. During adding new alias
abook asks about alias name, e-mail address, personal name and confirmation for
given data.  Some this fields could be filled automatically by interaction
between abook and mutt. Of course file <code>$HOME/.mutt/alias</code> have to exist before
running mutt:
touch <code>$HOME/.mutt/alias</code> To access saved aliases simply click <Tab> button in
cc, to or bcc filed.  There is few more options that I found useful. To find it
please go to my <a href="https://github.com/pietrushnic/workspace">workspace</a> scripts at
github. Also if you have any issues with the configuration or comments please
let me know by commenting below the post.</p>
]]></content>
  </entry>
  
</feed>
